// Code generated by MockGen. DO NOT EDIT.
// Source: ./master_config_mysql_repository.gen.go

// Package masterConfig is a generated GoMock package.
package masterConfig

import (
	context "context"
	reflect "reflect"

	enum "github.com/game-core/gocrafter/pkg/domain/enum"
	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockMasterConfigMysqlRepository is a mock of MasterConfigMysqlRepository interface.
type MockMasterConfigMysqlRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMasterConfigMysqlRepositoryMockRecorder
}

// MockMasterConfigMysqlRepositoryMockRecorder is the mock recorder for MockMasterConfigMysqlRepository.
type MockMasterConfigMysqlRepositoryMockRecorder struct {
	mock *MockMasterConfigMysqlRepository
}

// NewMockMasterConfigMysqlRepository creates a new mock instance.
func NewMockMasterConfigMysqlRepository(ctrl *gomock.Controller) *MockMasterConfigMysqlRepository {
	mock := &MockMasterConfigMysqlRepository{ctrl: ctrl}
	mock.recorder = &MockMasterConfigMysqlRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMasterConfigMysqlRepository) EXPECT() *MockMasterConfigMysqlRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockMasterConfigMysqlRepository) Create(ctx context.Context, tx *gorm.DB, m *MasterConfig) (*MasterConfig, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, tx, m)
	ret0, _ := ret[0].(*MasterConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMasterConfigMysqlRepositoryMockRecorder) Create(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMasterConfigMysqlRepository)(nil).Create), ctx, tx, m)
}

// CreateList mocks base method.
func (m *MockMasterConfigMysqlRepository) CreateList(ctx context.Context, tx *gorm.DB, ms MasterConfigs) (MasterConfigs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", ctx, tx, ms)
	ret0, _ := ret[0].(MasterConfigs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateList indicates an expected call of CreateList.
func (mr *MockMasterConfigMysqlRepositoryMockRecorder) CreateList(ctx, tx, ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockMasterConfigMysqlRepository)(nil).CreateList), ctx, tx, ms)
}

// Delete mocks base method.
func (m_2 *MockMasterConfigMysqlRepository) Delete(ctx context.Context, tx *gorm.DB, m *MasterConfig) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Delete", ctx, tx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMasterConfigMysqlRepositoryMockRecorder) Delete(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMasterConfigMysqlRepository)(nil).Delete), ctx, tx, m)
}

// Find mocks base method.
func (m *MockMasterConfigMysqlRepository) Find(ctx context.Context, id int64) (*MasterConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id)
	ret0, _ := ret[0].(*MasterConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockMasterConfigMysqlRepositoryMockRecorder) Find(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMasterConfigMysqlRepository)(nil).Find), ctx, id)
}

// FindByConfigType mocks base method.
func (m *MockMasterConfigMysqlRepository) FindByConfigType(ctx context.Context, configType enum.ConfigType) (*MasterConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByConfigType", ctx, configType)
	ret0, _ := ret[0].(*MasterConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByConfigType indicates an expected call of FindByConfigType.
func (mr *MockMasterConfigMysqlRepositoryMockRecorder) FindByConfigType(ctx, configType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByConfigType", reflect.TypeOf((*MockMasterConfigMysqlRepository)(nil).FindByConfigType), ctx, configType)
}

// FindList mocks base method.
func (m *MockMasterConfigMysqlRepository) FindList(ctx context.Context) (MasterConfigs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindList", ctx)
	ret0, _ := ret[0].(MasterConfigs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindList indicates an expected call of FindList.
func (mr *MockMasterConfigMysqlRepositoryMockRecorder) FindList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindList", reflect.TypeOf((*MockMasterConfigMysqlRepository)(nil).FindList), ctx)
}

// FindListByConfigType mocks base method.
func (m *MockMasterConfigMysqlRepository) FindListByConfigType(ctx context.Context, configType enum.ConfigType) (MasterConfigs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByConfigType", ctx, configType)
	ret0, _ := ret[0].(MasterConfigs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByConfigType indicates an expected call of FindListByConfigType.
func (mr *MockMasterConfigMysqlRepositoryMockRecorder) FindListByConfigType(ctx, configType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByConfigType", reflect.TypeOf((*MockMasterConfigMysqlRepository)(nil).FindListByConfigType), ctx, configType)
}

// FindOrNil mocks base method.
func (m *MockMasterConfigMysqlRepository) FindOrNil(ctx context.Context, id int64) (*MasterConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNil", ctx, id)
	ret0, _ := ret[0].(*MasterConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNil indicates an expected call of FindOrNil.
func (mr *MockMasterConfigMysqlRepositoryMockRecorder) FindOrNil(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNil", reflect.TypeOf((*MockMasterConfigMysqlRepository)(nil).FindOrNil), ctx, id)
}

// FindOrNilByConfigType mocks base method.
func (m *MockMasterConfigMysqlRepository) FindOrNilByConfigType(ctx context.Context, configType enum.ConfigType) (*MasterConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByConfigType", ctx, configType)
	ret0, _ := ret[0].(*MasterConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByConfigType indicates an expected call of FindOrNilByConfigType.
func (mr *MockMasterConfigMysqlRepositoryMockRecorder) FindOrNilByConfigType(ctx, configType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByConfigType", reflect.TypeOf((*MockMasterConfigMysqlRepository)(nil).FindOrNilByConfigType), ctx, configType)
}

// Update mocks base method.
func (m_2 *MockMasterConfigMysqlRepository) Update(ctx context.Context, tx *gorm.DB, m *MasterConfig) (*MasterConfig, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, tx, m)
	ret0, _ := ret[0].(*MasterConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMasterConfigMysqlRepositoryMockRecorder) Update(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMasterConfigMysqlRepository)(nil).Update), ctx, tx, m)
}
