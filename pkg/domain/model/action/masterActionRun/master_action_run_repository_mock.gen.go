// Code generated by MockGen. DO NOT EDIT.
// Source: ./master_action_run_repository.gen.go

// Package masterActionRun is a generated GoMock package.
package masterActionRun

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockMasterActionRunRepository is a mock of MasterActionRunRepository interface.
type MockMasterActionRunRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMasterActionRunRepositoryMockRecorder
}

// MockMasterActionRunRepositoryMockRecorder is the mock recorder for MockMasterActionRunRepository.
type MockMasterActionRunRepositoryMockRecorder struct {
	mock *MockMasterActionRunRepository
}

// NewMockMasterActionRunRepository creates a new mock instance.
func NewMockMasterActionRunRepository(ctrl *gomock.Controller) *MockMasterActionRunRepository {
	mock := &MockMasterActionRunRepository{ctrl: ctrl}
	mock.recorder = &MockMasterActionRunRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMasterActionRunRepository) EXPECT() *MockMasterActionRunRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockMasterActionRunRepository) Create(ctx context.Context, tx *gorm.DB, m *MasterActionRun) (*MasterActionRun, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, tx, m)
	ret0, _ := ret[0].(*MasterActionRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMasterActionRunRepositoryMockRecorder) Create(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMasterActionRunRepository)(nil).Create), ctx, tx, m)
}

// CreateList mocks base method.
func (m *MockMasterActionRunRepository) CreateList(ctx context.Context, tx *gorm.DB, ms MasterActionRuns) (MasterActionRuns, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", ctx, tx, ms)
	ret0, _ := ret[0].(MasterActionRuns)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateList indicates an expected call of CreateList.
func (mr *MockMasterActionRunRepositoryMockRecorder) CreateList(ctx, tx, ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockMasterActionRunRepository)(nil).CreateList), ctx, tx, ms)
}

// Delete mocks base method.
func (m_2 *MockMasterActionRunRepository) Delete(ctx context.Context, tx *gorm.DB, m *MasterActionRun) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Delete", ctx, tx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMasterActionRunRepositoryMockRecorder) Delete(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMasterActionRunRepository)(nil).Delete), ctx, tx, m)
}

// FindOrNilByActionId mocks base method.
func (m *MockMasterActionRunRepository) FindOrNilByActionId(ctx context.Context, actionId int64) (*MasterActionRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByActionId", ctx, actionId)
	ret0, _ := ret[0].(*MasterActionRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByActionId indicates an expected call of FindOrNilByActionId.
func (mr *MockMasterActionRunRepositoryMockRecorder) FindOrNilByActionId(ctx, actionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByActionId", reflect.TypeOf((*MockMasterActionRunRepository)(nil).FindOrNilByActionId), ctx, actionId)
}

// FindOrNilByName mocks base method.
func (m *MockMasterActionRunRepository) FindOrNilByName(ctx context.Context, name string) (*MasterActionRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByName", ctx, name)
	ret0, _ := ret[0].(*MasterActionRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByName indicates an expected call of FindOrNilByName.
func (mr *MockMasterActionRunRepositoryMockRecorder) FindOrNilByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByName", reflect.TypeOf((*MockMasterActionRunRepository)(nil).FindOrNilByName), ctx, name)
}

// Find mocks base method.
func (m *MockMasterActionRunRepository) Find(ctx context.Context, id int64) (*MasterActionRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id)
	ret0, _ := ret[0].(*MasterActionRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockMasterActionRunRepositoryMockRecorder) Find(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMasterActionRunRepository)(nil).Find), ctx, id)
}

// FindByActionId mocks base method.
func (m *MockMasterActionRunRepository) FindByActionId(ctx context.Context, actionId int64) (*MasterActionRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActionId", ctx, actionId)
	ret0, _ := ret[0].(*MasterActionRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByActionId indicates an expected call of FindByActionId.
func (mr *MockMasterActionRunRepositoryMockRecorder) FindByActionId(ctx, actionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActionId", reflect.TypeOf((*MockMasterActionRunRepository)(nil).FindByActionId), ctx, actionId)
}

// FindByName mocks base method.
func (m *MockMasterActionRunRepository) FindByName(ctx context.Context, name string) (*MasterActionRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", ctx, name)
	ret0, _ := ret[0].(*MasterActionRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockMasterActionRunRepositoryMockRecorder) FindByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockMasterActionRunRepository)(nil).FindByName), ctx, name)
}

// FindList mocks base method.
func (m *MockMasterActionRunRepository) FindList(ctx context.Context) (MasterActionRuns, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindList", ctx)
	ret0, _ := ret[0].(MasterActionRuns)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindList indicates an expected call of FindList.
func (mr *MockMasterActionRunRepositoryMockRecorder) FindList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindList", reflect.TypeOf((*MockMasterActionRunRepository)(nil).FindList), ctx)
}

// FindListByActionId mocks base method.
func (m *MockMasterActionRunRepository) FindListByActionId(ctx context.Context, actionId int64) (MasterActionRuns, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByActionId", ctx, actionId)
	ret0, _ := ret[0].(MasterActionRuns)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByActionId indicates an expected call of FindListByActionId.
func (mr *MockMasterActionRunRepositoryMockRecorder) FindListByActionId(ctx, actionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByActionId", reflect.TypeOf((*MockMasterActionRunRepository)(nil).FindListByActionId), ctx, actionId)
}

// FindListByName mocks base method.
func (m *MockMasterActionRunRepository) FindListByName(ctx context.Context, name string) (MasterActionRuns, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByName", ctx, name)
	ret0, _ := ret[0].(MasterActionRuns)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByName indicates an expected call of FindListByName.
func (mr *MockMasterActionRunRepositoryMockRecorder) FindListByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByName", reflect.TypeOf((*MockMasterActionRunRepository)(nil).FindListByName), ctx, name)
}

// FindOrNil mocks base method.
func (m *MockMasterActionRunRepository) FindOrNil(ctx context.Context, id int64) (*MasterActionRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNil", ctx, id)
	ret0, _ := ret[0].(*MasterActionRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNil indicates an expected call of FindOrNil.
func (mr *MockMasterActionRunRepositoryMockRecorder) FindOrNil(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNil", reflect.TypeOf((*MockMasterActionRunRepository)(nil).FindOrNil), ctx, id)
}

// Update mocks base method.
func (m_2 *MockMasterActionRunRepository) Update(ctx context.Context, tx *gorm.DB, m *MasterActionRun) (*MasterActionRun, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, tx, m)
	ret0, _ := ret[0].(*MasterActionRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMasterActionRunRepositoryMockRecorder) Update(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMasterActionRunRepository)(nil).Update), ctx, tx, m)
}
