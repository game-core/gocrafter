// Code generated by MockGen. DO NOT EDIT.
// Source: ./master_action_repository.gen.go

// Package masterAction is a generated GoMock package.
package masterAction

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockMasterActionRepository is a mock of MasterActionRepository interface.
type MockMasterActionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMasterActionRepositoryMockRecorder
}

// MockMasterActionRepositoryMockRecorder is the mock recorder for MockMasterActionRepository.
type MockMasterActionRepositoryMockRecorder struct {
	mock *MockMasterActionRepository
}

// NewMockMasterActionRepository creates a new mock instance.
func NewMockMasterActionRepository(ctrl *gomock.Controller) *MockMasterActionRepository {
	mock := &MockMasterActionRepository{ctrl: ctrl}
	mock.recorder = &MockMasterActionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMasterActionRepository) EXPECT() *MockMasterActionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockMasterActionRepository) Create(ctx context.Context, tx *gorm.DB, m *MasterAction) (*MasterAction, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, tx, m)
	ret0, _ := ret[0].(*MasterAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMasterActionRepositoryMockRecorder) Create(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMasterActionRepository)(nil).Create), ctx, tx, m)
}

// CreateList mocks base method.
func (m *MockMasterActionRepository) CreateList(ctx context.Context, tx *gorm.DB, ms MasterActions) (MasterActions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", ctx, tx, ms)
	ret0, _ := ret[0].(MasterActions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateList indicates an expected call of CreateList.
func (mr *MockMasterActionRepositoryMockRecorder) CreateList(ctx, tx, ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockMasterActionRepository)(nil).CreateList), ctx, tx, ms)
}

// Delete mocks base method.
func (m_2 *MockMasterActionRepository) Delete(ctx context.Context, tx *gorm.DB, m *MasterAction) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Delete", ctx, tx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMasterActionRepositoryMockRecorder) Delete(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMasterActionRepository)(nil).Delete), ctx, tx, m)
}

// FinOrNilByAnyId mocks base method.
func (m *MockMasterActionRepository) FinOrNilByAnyId(ctx context.Context, anyId int64) (*MasterAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinOrNilByAnyId", ctx, anyId)
	ret0, _ := ret[0].(*MasterAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinOrNilByAnyId indicates an expected call of FinOrNilByAnyId.
func (mr *MockMasterActionRepositoryMockRecorder) FinOrNilByAnyId(ctx, anyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinOrNilByAnyId", reflect.TypeOf((*MockMasterActionRepository)(nil).FinOrNilByAnyId), ctx, anyId)
}

// FinOrNilByName mocks base method.
func (m *MockMasterActionRepository) FinOrNilByName(ctx context.Context, name string) (*MasterAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinOrNilByName", ctx, name)
	ret0, _ := ret[0].(*MasterAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinOrNilByName indicates an expected call of FinOrNilByName.
func (mr *MockMasterActionRepositoryMockRecorder) FinOrNilByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinOrNilByName", reflect.TypeOf((*MockMasterActionRepository)(nil).FinOrNilByName), ctx, name)
}

// Find mocks base method.
func (m *MockMasterActionRepository) Find(ctx context.Context, id int64) (*MasterAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id)
	ret0, _ := ret[0].(*MasterAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockMasterActionRepositoryMockRecorder) Find(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMasterActionRepository)(nil).Find), ctx, id)
}

// FindByAnyId mocks base method.
func (m *MockMasterActionRepository) FindByAnyId(ctx context.Context, anyId int64) (*MasterAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAnyId", ctx, anyId)
	ret0, _ := ret[0].(*MasterAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAnyId indicates an expected call of FindByAnyId.
func (mr *MockMasterActionRepositoryMockRecorder) FindByAnyId(ctx, anyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAnyId", reflect.TypeOf((*MockMasterActionRepository)(nil).FindByAnyId), ctx, anyId)
}

// FindByName mocks base method.
func (m *MockMasterActionRepository) FindByName(ctx context.Context, name string) (*MasterAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", ctx, name)
	ret0, _ := ret[0].(*MasterAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockMasterActionRepositoryMockRecorder) FindByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockMasterActionRepository)(nil).FindByName), ctx, name)
}

// FindList mocks base method.
func (m *MockMasterActionRepository) FindList(ctx context.Context) (MasterActions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindList", ctx)
	ret0, _ := ret[0].(MasterActions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindList indicates an expected call of FindList.
func (mr *MockMasterActionRepositoryMockRecorder) FindList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindList", reflect.TypeOf((*MockMasterActionRepository)(nil).FindList), ctx)
}

// FindListByAnyId mocks base method.
func (m *MockMasterActionRepository) FindListByAnyId(ctx context.Context, anyId int64) (MasterActions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByAnyId", ctx, anyId)
	ret0, _ := ret[0].(MasterActions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByAnyId indicates an expected call of FindListByAnyId.
func (mr *MockMasterActionRepositoryMockRecorder) FindListByAnyId(ctx, anyId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByAnyId", reflect.TypeOf((*MockMasterActionRepository)(nil).FindListByAnyId), ctx, anyId)
}

// FindListByName mocks base method.
func (m *MockMasterActionRepository) FindListByName(ctx context.Context, name string) (MasterActions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByName", ctx, name)
	ret0, _ := ret[0].(MasterActions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByName indicates an expected call of FindListByName.
func (mr *MockMasterActionRepositoryMockRecorder) FindListByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByName", reflect.TypeOf((*MockMasterActionRepository)(nil).FindListByName), ctx, name)
}

// FindOrNil mocks base method.
func (m *MockMasterActionRepository) FindOrNil(ctx context.Context, id int64) (*MasterAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNil", ctx, id)
	ret0, _ := ret[0].(*MasterAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNil indicates an expected call of FindOrNil.
func (mr *MockMasterActionRepositoryMockRecorder) FindOrNil(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNil", reflect.TypeOf((*MockMasterActionRepository)(nil).FindOrNil), ctx, id)
}

// Update mocks base method.
func (m_2 *MockMasterActionRepository) Update(ctx context.Context, tx *gorm.DB, m *MasterAction) (*MasterAction, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, tx, m)
	ret0, _ := ret[0].(*MasterAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMasterActionRepositoryMockRecorder) Update(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMasterActionRepository)(nil).Update), ctx, tx, m)
}
