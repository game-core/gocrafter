// Code generated by MockGen. DO NOT EDIT.
// Source: ./user_action_repository.gen.go

// Package userAction is a generated GoMock package.
package userAction

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockUserActionRepository is a mock of UserActionRepository interface.
type MockUserActionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserActionRepositoryMockRecorder
}

// MockUserActionRepositoryMockRecorder is the mock recorder for MockUserActionRepository.
type MockUserActionRepositoryMockRecorder struct {
	mock *MockUserActionRepository
}

// NewMockUserActionRepository creates a new mock instance.
func NewMockUserActionRepository(ctrl *gomock.Controller) *MockUserActionRepository {
	mock := &MockUserActionRepository{ctrl: ctrl}
	mock.recorder = &MockUserActionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserActionRepository) EXPECT() *MockUserActionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockUserActionRepository) Create(ctx context.Context, tx *gorm.DB, m *UserAction) (*UserAction, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, tx, m)
	ret0, _ := ret[0].(*UserAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserActionRepositoryMockRecorder) Create(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserActionRepository)(nil).Create), ctx, tx, m)
}

// CreateList mocks base method.
func (m *MockUserActionRepository) CreateList(ctx context.Context, tx *gorm.DB, ms UserActions) (UserActions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", ctx, tx, ms)
	ret0, _ := ret[0].(UserActions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateList indicates an expected call of CreateList.
func (mr *MockUserActionRepositoryMockRecorder) CreateList(ctx, tx, ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockUserActionRepository)(nil).CreateList), ctx, tx, ms)
}

// Delete mocks base method.
func (m_2 *MockUserActionRepository) Delete(ctx context.Context, tx *gorm.DB, m *UserAction) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Delete", ctx, tx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserActionRepositoryMockRecorder) Delete(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserActionRepository)(nil).Delete), ctx, tx, m)
}

// Find mocks base method.
func (m *MockUserActionRepository) Find(ctx context.Context, userId string, masterActionId int64) (*UserAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, userId, masterActionId)
	ret0, _ := ret[0].(*UserAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockUserActionRepositoryMockRecorder) Find(ctx, userId, masterActionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUserActionRepository)(nil).Find), ctx, userId, masterActionId)
}

// FindList mocks base method.
func (m *MockUserActionRepository) FindList(ctx context.Context, userId string) (UserActions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindList", ctx, userId)
	ret0, _ := ret[0].(UserActions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindList indicates an expected call of FindList.
func (mr *MockUserActionRepositoryMockRecorder) FindList(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindList", reflect.TypeOf((*MockUserActionRepository)(nil).FindList), ctx, userId)
}

// FindOrNil mocks base method.
func (m *MockUserActionRepository) FindOrNil(ctx context.Context, userId string, masterActionId int64) (*UserAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNil", ctx, userId, masterActionId)
	ret0, _ := ret[0].(*UserAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNil indicates an expected call of FindOrNil.
func (mr *MockUserActionRepositoryMockRecorder) FindOrNil(ctx, userId, masterActionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNil", reflect.TypeOf((*MockUserActionRepository)(nil).FindOrNil), ctx, userId, masterActionId)
}

// Update mocks base method.
func (m_2 *MockUserActionRepository) Update(ctx context.Context, tx *gorm.DB, m *UserAction) (*UserAction, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, tx, m)
	ret0, _ := ret[0].(*UserAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserActionRepositoryMockRecorder) Update(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserActionRepository)(nil).Update), ctx, tx, m)
}
