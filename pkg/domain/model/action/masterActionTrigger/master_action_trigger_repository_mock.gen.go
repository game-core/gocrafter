// Code generated by MockGen. DO NOT EDIT.
// Source: ./master_action_trigger_repository.gen.go

// Package masterActionTrigger is a generated GoMock package.
package masterActionTrigger

import (
	context "context"
	reflect "reflect"

	enum "github.com/game-core/gocrafter/pkg/domain/enum"
	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockMasterActionTriggerRepository is a mock of MasterActionTriggerRepository interface.
type MockMasterActionTriggerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMasterActionTriggerRepositoryMockRecorder
}

// MockMasterActionTriggerRepositoryMockRecorder is the mock recorder for MockMasterActionTriggerRepository.
type MockMasterActionTriggerRepositoryMockRecorder struct {
	mock *MockMasterActionTriggerRepository
}

// NewMockMasterActionTriggerRepository creates a new mock instance.
func NewMockMasterActionTriggerRepository(ctrl *gomock.Controller) *MockMasterActionTriggerRepository {
	mock := &MockMasterActionTriggerRepository{ctrl: ctrl}
	mock.recorder = &MockMasterActionTriggerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMasterActionTriggerRepository) EXPECT() *MockMasterActionTriggerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockMasterActionTriggerRepository) Create(ctx context.Context, tx *gorm.DB, m *MasterActionTrigger) (*MasterActionTrigger, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, tx, m)
	ret0, _ := ret[0].(*MasterActionTrigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMasterActionTriggerRepositoryMockRecorder) Create(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMasterActionTriggerRepository)(nil).Create), ctx, tx, m)
}

// CreateList mocks base method.
func (m *MockMasterActionTriggerRepository) CreateList(ctx context.Context, tx *gorm.DB, ms MasterActionTriggers) (MasterActionTriggers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", ctx, tx, ms)
	ret0, _ := ret[0].(MasterActionTriggers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateList indicates an expected call of CreateList.
func (mr *MockMasterActionTriggerRepositoryMockRecorder) CreateList(ctx, tx, ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockMasterActionTriggerRepository)(nil).CreateList), ctx, tx, ms)
}

// Delete mocks base method.
func (m_2 *MockMasterActionTriggerRepository) Delete(ctx context.Context, tx *gorm.DB, m *MasterActionTrigger) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Delete", ctx, tx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMasterActionTriggerRepositoryMockRecorder) Delete(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMasterActionTriggerRepository)(nil).Delete), ctx, tx, m)
}

// Find mocks base method.
func (m *MockMasterActionTriggerRepository) Find(ctx context.Context, id int64) (*MasterActionTrigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id)
	ret0, _ := ret[0].(*MasterActionTrigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockMasterActionTriggerRepositoryMockRecorder) Find(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMasterActionTriggerRepository)(nil).Find), ctx, id)
}

// FindByActionTriggerType mocks base method.
func (m *MockMasterActionTriggerRepository) FindByActionTriggerType(ctx context.Context, actionTriggerType enum.ActionTriggerType) (*MasterActionTrigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByActionTriggerType", ctx, actionTriggerType)
	ret0, _ := ret[0].(*MasterActionTrigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByActionTriggerType indicates an expected call of FindByActionTriggerType.
func (mr *MockMasterActionTriggerRepositoryMockRecorder) FindByActionTriggerType(ctx, actionTriggerType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByActionTriggerType", reflect.TypeOf((*MockMasterActionTriggerRepository)(nil).FindByActionTriggerType), ctx, actionTriggerType)
}

// FindList mocks base method.
func (m *MockMasterActionTriggerRepository) FindList(ctx context.Context) (MasterActionTriggers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindList", ctx)
	ret0, _ := ret[0].(MasterActionTriggers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindList indicates an expected call of FindList.
func (mr *MockMasterActionTriggerRepositoryMockRecorder) FindList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindList", reflect.TypeOf((*MockMasterActionTriggerRepository)(nil).FindList), ctx)
}

// FindListByActionTriggerType mocks base method.
func (m *MockMasterActionTriggerRepository) FindListByActionTriggerType(ctx context.Context, actionTriggerType enum.ActionTriggerType) (MasterActionTriggers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByActionTriggerType", ctx, actionTriggerType)
	ret0, _ := ret[0].(MasterActionTriggers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByActionTriggerType indicates an expected call of FindListByActionTriggerType.
func (mr *MockMasterActionTriggerRepositoryMockRecorder) FindListByActionTriggerType(ctx, actionTriggerType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByActionTriggerType", reflect.TypeOf((*MockMasterActionTriggerRepository)(nil).FindListByActionTriggerType), ctx, actionTriggerType)
}

// FindOrNil mocks base method.
func (m *MockMasterActionTriggerRepository) FindOrNil(ctx context.Context, id int64) (*MasterActionTrigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNil", ctx, id)
	ret0, _ := ret[0].(*MasterActionTrigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNil indicates an expected call of FindOrNil.
func (mr *MockMasterActionTriggerRepositoryMockRecorder) FindOrNil(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNil", reflect.TypeOf((*MockMasterActionTriggerRepository)(nil).FindOrNil), ctx, id)
}

// FindOrNilByActionTriggerType mocks base method.
func (m *MockMasterActionTriggerRepository) FindOrNilByActionTriggerType(ctx context.Context, actionTriggerType enum.ActionTriggerType) (*MasterActionTrigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByActionTriggerType", ctx, actionTriggerType)
	ret0, _ := ret[0].(*MasterActionTrigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByActionTriggerType indicates an expected call of FindOrNilByActionTriggerType.
func (mr *MockMasterActionTriggerRepositoryMockRecorder) FindOrNilByActionTriggerType(ctx, actionTriggerType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByActionTriggerType", reflect.TypeOf((*MockMasterActionTriggerRepository)(nil).FindOrNilByActionTriggerType), ctx, actionTriggerType)
}

// Update mocks base method.
func (m_2 *MockMasterActionTriggerRepository) Update(ctx context.Context, tx *gorm.DB, m *MasterActionTrigger) (*MasterActionTrigger, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, tx, m)
	ret0, _ := ret[0].(*MasterActionTrigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMasterActionTriggerRepositoryMockRecorder) Update(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMasterActionTriggerRepository)(nil).Update), ctx, tx, m)
}
