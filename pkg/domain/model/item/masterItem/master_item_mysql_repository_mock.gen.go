// Code generated by MockGen. DO NOT EDIT.
// Source: ./master_item_mysql_repository.gen.go

// Package masterItem is a generated GoMock package.
package masterItem

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockMasterItemMysqlRepository is a mock of MasterItemMysqlRepository interface.
type MockMasterItemMysqlRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMasterItemMysqlRepositoryMockRecorder
}

// MockMasterItemMysqlRepositoryMockRecorder is the mock recorder for MockMasterItemMysqlRepository.
type MockMasterItemMysqlRepositoryMockRecorder struct {
	mock *MockMasterItemMysqlRepository
}

// NewMockMasterItemMysqlRepository creates a new mock instance.
func NewMockMasterItemMysqlRepository(ctrl *gomock.Controller) *MockMasterItemMysqlRepository {
	mock := &MockMasterItemMysqlRepository{ctrl: ctrl}
	mock.recorder = &MockMasterItemMysqlRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMasterItemMysqlRepository) EXPECT() *MockMasterItemMysqlRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockMasterItemMysqlRepository) Create(ctx context.Context, tx *gorm.DB, m *MasterItem) (*MasterItem, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, tx, m)
	ret0, _ := ret[0].(*MasterItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMasterItemMysqlRepositoryMockRecorder) Create(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMasterItemMysqlRepository)(nil).Create), ctx, tx, m)
}

// CreateList mocks base method.
func (m *MockMasterItemMysqlRepository) CreateList(ctx context.Context, tx *gorm.DB, ms MasterItems) (MasterItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", ctx, tx, ms)
	ret0, _ := ret[0].(MasterItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateList indicates an expected call of CreateList.
func (mr *MockMasterItemMysqlRepositoryMockRecorder) CreateList(ctx, tx, ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockMasterItemMysqlRepository)(nil).CreateList), ctx, tx, ms)
}

// Delete mocks base method.
func (m_2 *MockMasterItemMysqlRepository) Delete(ctx context.Context, tx *gorm.DB, m *MasterItem) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Delete", ctx, tx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMasterItemMysqlRepositoryMockRecorder) Delete(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMasterItemMysqlRepository)(nil).Delete), ctx, tx, m)
}

// Find mocks base method.
func (m *MockMasterItemMysqlRepository) Find(ctx context.Context, id int64) (*MasterItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id)
	ret0, _ := ret[0].(*MasterItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockMasterItemMysqlRepositoryMockRecorder) Find(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMasterItemMysqlRepository)(nil).Find), ctx, id)
}

// FindByName mocks base method.
func (m *MockMasterItemMysqlRepository) FindByName(ctx context.Context, name string) (*MasterItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", ctx, name)
	ret0, _ := ret[0].(*MasterItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockMasterItemMysqlRepositoryMockRecorder) FindByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockMasterItemMysqlRepository)(nil).FindByName), ctx, name)
}

// FindList mocks base method.
func (m *MockMasterItemMysqlRepository) FindList(ctx context.Context) (MasterItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindList", ctx)
	ret0, _ := ret[0].(MasterItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindList indicates an expected call of FindList.
func (mr *MockMasterItemMysqlRepositoryMockRecorder) FindList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindList", reflect.TypeOf((*MockMasterItemMysqlRepository)(nil).FindList), ctx)
}

// FindListByName mocks base method.
func (m *MockMasterItemMysqlRepository) FindListByName(ctx context.Context, name string) (MasterItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByName", ctx, name)
	ret0, _ := ret[0].(MasterItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByName indicates an expected call of FindListByName.
func (mr *MockMasterItemMysqlRepositoryMockRecorder) FindListByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByName", reflect.TypeOf((*MockMasterItemMysqlRepository)(nil).FindListByName), ctx, name)
}

// FindOrNil mocks base method.
func (m *MockMasterItemMysqlRepository) FindOrNil(ctx context.Context, id int64) (*MasterItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNil", ctx, id)
	ret0, _ := ret[0].(*MasterItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNil indicates an expected call of FindOrNil.
func (mr *MockMasterItemMysqlRepositoryMockRecorder) FindOrNil(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNil", reflect.TypeOf((*MockMasterItemMysqlRepository)(nil).FindOrNil), ctx, id)
}

// FindOrNilByName mocks base method.
func (m *MockMasterItemMysqlRepository) FindOrNilByName(ctx context.Context, name string) (*MasterItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByName", ctx, name)
	ret0, _ := ret[0].(*MasterItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByName indicates an expected call of FindOrNilByName.
func (mr *MockMasterItemMysqlRepositoryMockRecorder) FindOrNilByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByName", reflect.TypeOf((*MockMasterItemMysqlRepository)(nil).FindOrNilByName), ctx, name)
}

// Update mocks base method.
func (m_2 *MockMasterItemMysqlRepository) Update(ctx context.Context, tx *gorm.DB, m *MasterItem) (*MasterItem, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, tx, m)
	ret0, _ := ret[0].(*MasterItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMasterItemMysqlRepositoryMockRecorder) Update(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMasterItemMysqlRepository)(nil).Update), ctx, tx, m)
}
