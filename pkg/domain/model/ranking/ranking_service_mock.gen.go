// Code generated by MockGen. DO NOT EDIT.
// Source: ./ranking_service.go

// Package ranking is a generated GoMock package.
package ranking

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockRankingService is a mock of RankingService interface.
type MockRankingService struct {
	ctrl     *gomock.Controller
	recorder *MockRankingServiceMockRecorder
}

// MockRankingServiceMockRecorder is the mock recorder for MockRankingService.
type MockRankingServiceMockRecorder struct {
	mock *MockRankingService
}

// NewMockRankingService creates a new mock instance.
func NewMockRankingService(ctrl *gomock.Controller) *MockRankingService {
	mock := &MockRankingService{ctrl: ctrl}
	mock.recorder = &MockRankingServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRankingService) EXPECT() *MockRankingServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRankingService) Get(ctx context.Context, now time.Time, req *RankingGetRequest) (*RankingGetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, now, req)
	ret0, _ := ret[0].(*RankingGetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRankingServiceMockRecorder) Get(ctx, now, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRankingService)(nil).Get), ctx, now, req)
}

// GetMaster mocks base method.
func (m *MockRankingService) GetMaster(ctx context.Context, req *RankingGetMasterRequest) (*RankingGetMasterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaster", ctx, req)
	ret0, _ := ret[0].(*RankingGetMasterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaster indicates an expected call of GetMaster.
func (mr *MockRankingServiceMockRecorder) GetMaster(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaster", reflect.TypeOf((*MockRankingService)(nil).GetMaster), ctx, req)
}

// Update mocks base method.
func (m *MockRankingService) Update(ctx context.Context, tx *gorm.DB, now time.Time, req *RankingUpdateRequest) (*RankingUpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, tx, now, req)
	ret0, _ := ret[0].(*RankingUpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRankingServiceMockRecorder) Update(ctx, tx, now, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRankingService)(nil).Update), ctx, tx, now, req)
}
