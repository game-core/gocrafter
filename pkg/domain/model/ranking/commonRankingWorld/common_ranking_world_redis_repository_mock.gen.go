// Code generated by MockGen. DO NOT EDIT.
// Source: ./common_ranking_world_redis_repository.gen.go

// Package commonRankingWorld is a generated GoMock package.
package commonRankingWorld

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v9 "github.com/redis/go-redis/v9"
)

// MockCommonRankingWorldRedisRepository is a mock of CommonRankingWorldRedisRepository interface.
type MockCommonRankingWorldRedisRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCommonRankingWorldRedisRepositoryMockRecorder
}

// MockCommonRankingWorldRedisRepositoryMockRecorder is the mock recorder for MockCommonRankingWorldRedisRepository.
type MockCommonRankingWorldRedisRepositoryMockRecorder struct {
	mock *MockCommonRankingWorldRedisRepository
}

// NewMockCommonRankingWorldRedisRepository creates a new mock instance.
func NewMockCommonRankingWorldRedisRepository(ctrl *gomock.Controller) *MockCommonRankingWorldRedisRepository {
	mock := &MockCommonRankingWorldRedisRepository{ctrl: ctrl}
	mock.recorder = &MockCommonRankingWorldRedisRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommonRankingWorldRedisRepository) EXPECT() *MockCommonRankingWorldRedisRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m_2 *MockCommonRankingWorldRedisRepository) Delete(ctx context.Context, tx v9.Pipeliner, m *CommonRankingWorld) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Delete", ctx, tx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCommonRankingWorldRedisRepositoryMockRecorder) Delete(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCommonRankingWorldRedisRepository)(nil).Delete), ctx, tx, m)
}

// Find mocks base method.
func (m *MockCommonRankingWorldRedisRepository) Find(ctx context.Context, masterRankingId int64, userId string) (*CommonRankingWorld, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, masterRankingId, userId)
	ret0, _ := ret[0].(*CommonRankingWorld)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockCommonRankingWorldRedisRepositoryMockRecorder) Find(ctx, masterRankingId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCommonRankingWorldRedisRepository)(nil).Find), ctx, masterRankingId, userId)
}

// FindOrNil mocks base method.
func (m *MockCommonRankingWorldRedisRepository) FindOrNil(ctx context.Context, masterRankingId int64, userId string) (*CommonRankingWorld, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNil", ctx, masterRankingId, userId)
	ret0, _ := ret[0].(*CommonRankingWorld)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNil indicates an expected call of FindOrNil.
func (mr *MockCommonRankingWorldRedisRepositoryMockRecorder) FindOrNil(ctx, masterRankingId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNil", reflect.TypeOf((*MockCommonRankingWorldRedisRepository)(nil).FindOrNil), ctx, masterRankingId, userId)
}

// Set mocks base method.
func (m_2 *MockCommonRankingWorldRedisRepository) Set(ctx context.Context, tx v9.Pipeliner, m *CommonRankingWorld) (*CommonRankingWorld, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Set", ctx, tx, m)
	ret0, _ := ret[0].(*CommonRankingWorld)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockCommonRankingWorldRedisRepositoryMockRecorder) Set(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCommonRankingWorldRedisRepository)(nil).Set), ctx, tx, m)
}
