// Code generated by MockGen. DO NOT EDIT.
// Source: ./common_ranking_room_redis_repository.gen.go

// Package commonRankingRoom is a generated GoMock package.
package commonRankingRoom

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v9 "github.com/redis/go-redis/v9"
)

// MockCommonRankingRoomRedisRepository is a mock of CommonRankingRoomRedisRepository interface.
type MockCommonRankingRoomRedisRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCommonRankingRoomRedisRepositoryMockRecorder
}

// MockCommonRankingRoomRedisRepositoryMockRecorder is the mock recorder for MockCommonRankingRoomRedisRepository.
type MockCommonRankingRoomRedisRepositoryMockRecorder struct {
	mock *MockCommonRankingRoomRedisRepository
}

// NewMockCommonRankingRoomRedisRepository creates a new mock instance.
func NewMockCommonRankingRoomRedisRepository(ctrl *gomock.Controller) *MockCommonRankingRoomRedisRepository {
	mock := &MockCommonRankingRoomRedisRepository{ctrl: ctrl}
	mock.recorder = &MockCommonRankingRoomRedisRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommonRankingRoomRedisRepository) EXPECT() *MockCommonRankingRoomRedisRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m_2 *MockCommonRankingRoomRedisRepository) Delete(ctx context.Context, tx v9.Pipeliner, m *CommonRankingRoom) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Delete", ctx, tx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCommonRankingRoomRedisRepositoryMockRecorder) Delete(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCommonRankingRoomRedisRepository)(nil).Delete), ctx, tx, m)
}

// Find mocks base method.
func (m *MockCommonRankingRoomRedisRepository) Find(ctx context.Context, masterRankingId int64, roomId, userId string) (*CommonRankingRoom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, masterRankingId, roomId, userId)
	ret0, _ := ret[0].(*CommonRankingRoom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockCommonRankingRoomRedisRepositoryMockRecorder) Find(ctx, masterRankingId, roomId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCommonRankingRoomRedisRepository)(nil).Find), ctx, masterRankingId, roomId, userId)
}

// FindOrNil mocks base method.
func (m *MockCommonRankingRoomRedisRepository) FindOrNil(ctx context.Context, masterRankingId int64, roomId, userId string) (*CommonRankingRoom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNil", ctx, masterRankingId, roomId, userId)
	ret0, _ := ret[0].(*CommonRankingRoom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNil indicates an expected call of FindOrNil.
func (mr *MockCommonRankingRoomRedisRepositoryMockRecorder) FindOrNil(ctx, masterRankingId, roomId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNil", reflect.TypeOf((*MockCommonRankingRoomRedisRepository)(nil).FindOrNil), ctx, masterRankingId, roomId, userId)
}

// Set mocks base method.
func (m_2 *MockCommonRankingRoomRedisRepository) Set(ctx context.Context, tx v9.Pipeliner, m *CommonRankingRoom) (*CommonRankingRoom, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Set", ctx, tx, m)
	ret0, _ := ret[0].(*CommonRankingRoom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockCommonRankingRoomRedisRepositoryMockRecorder) Set(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCommonRankingRoomRedisRepository)(nil).Set), ctx, tx, m)
}
