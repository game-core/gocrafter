// Code generated by MockGen. DO NOT EDIT.
// Source: ./master_ranking_scope_mysql_repository.gen.go

// Package masterRankingScope is a generated GoMock package.
package masterRankingScope

import (
	context "context"
	reflect "reflect"

	enum "github.com/game-core/gocrafter/pkg/domain/enum"
	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockMasterRankingScopeMysqlRepository is a mock of MasterRankingScopeMysqlRepository interface.
type MockMasterRankingScopeMysqlRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMasterRankingScopeMysqlRepositoryMockRecorder
}

// MockMasterRankingScopeMysqlRepositoryMockRecorder is the mock recorder for MockMasterRankingScopeMysqlRepository.
type MockMasterRankingScopeMysqlRepositoryMockRecorder struct {
	mock *MockMasterRankingScopeMysqlRepository
}

// NewMockMasterRankingScopeMysqlRepository creates a new mock instance.
func NewMockMasterRankingScopeMysqlRepository(ctrl *gomock.Controller) *MockMasterRankingScopeMysqlRepository {
	mock := &MockMasterRankingScopeMysqlRepository{ctrl: ctrl}
	mock.recorder = &MockMasterRankingScopeMysqlRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMasterRankingScopeMysqlRepository) EXPECT() *MockMasterRankingScopeMysqlRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockMasterRankingScopeMysqlRepository) Create(ctx context.Context, tx *gorm.DB, m *MasterRankingScope) (*MasterRankingScope, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, tx, m)
	ret0, _ := ret[0].(*MasterRankingScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMasterRankingScopeMysqlRepositoryMockRecorder) Create(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMasterRankingScopeMysqlRepository)(nil).Create), ctx, tx, m)
}

// CreateList mocks base method.
func (m *MockMasterRankingScopeMysqlRepository) CreateList(ctx context.Context, tx *gorm.DB, ms MasterRankingScopes) (MasterRankingScopes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", ctx, tx, ms)
	ret0, _ := ret[0].(MasterRankingScopes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateList indicates an expected call of CreateList.
func (mr *MockMasterRankingScopeMysqlRepositoryMockRecorder) CreateList(ctx, tx, ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockMasterRankingScopeMysqlRepository)(nil).CreateList), ctx, tx, ms)
}

// Delete mocks base method.
func (m_2 *MockMasterRankingScopeMysqlRepository) Delete(ctx context.Context, tx *gorm.DB, m *MasterRankingScope) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Delete", ctx, tx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMasterRankingScopeMysqlRepositoryMockRecorder) Delete(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMasterRankingScopeMysqlRepository)(nil).Delete), ctx, tx, m)
}

// Find mocks base method.
func (m *MockMasterRankingScopeMysqlRepository) Find(ctx context.Context, id int64) (*MasterRankingScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id)
	ret0, _ := ret[0].(*MasterRankingScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockMasterRankingScopeMysqlRepositoryMockRecorder) Find(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMasterRankingScopeMysqlRepository)(nil).Find), ctx, id)
}

// FindByRankingScopeType mocks base method.
func (m *MockMasterRankingScopeMysqlRepository) FindByRankingScopeType(ctx context.Context, rankingScopeType enum.RankingScopeType) (*MasterRankingScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByRankingScopeType", ctx, rankingScopeType)
	ret0, _ := ret[0].(*MasterRankingScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByRankingScopeType indicates an expected call of FindByRankingScopeType.
func (mr *MockMasterRankingScopeMysqlRepositoryMockRecorder) FindByRankingScopeType(ctx, rankingScopeType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByRankingScopeType", reflect.TypeOf((*MockMasterRankingScopeMysqlRepository)(nil).FindByRankingScopeType), ctx, rankingScopeType)
}

// FindList mocks base method.
func (m *MockMasterRankingScopeMysqlRepository) FindList(ctx context.Context) (MasterRankingScopes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindList", ctx)
	ret0, _ := ret[0].(MasterRankingScopes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindList indicates an expected call of FindList.
func (mr *MockMasterRankingScopeMysqlRepositoryMockRecorder) FindList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindList", reflect.TypeOf((*MockMasterRankingScopeMysqlRepository)(nil).FindList), ctx)
}

// FindListByRankingScopeType mocks base method.
func (m *MockMasterRankingScopeMysqlRepository) FindListByRankingScopeType(ctx context.Context, rankingScopeType enum.RankingScopeType) (MasterRankingScopes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByRankingScopeType", ctx, rankingScopeType)
	ret0, _ := ret[0].(MasterRankingScopes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByRankingScopeType indicates an expected call of FindListByRankingScopeType.
func (mr *MockMasterRankingScopeMysqlRepositoryMockRecorder) FindListByRankingScopeType(ctx, rankingScopeType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByRankingScopeType", reflect.TypeOf((*MockMasterRankingScopeMysqlRepository)(nil).FindListByRankingScopeType), ctx, rankingScopeType)
}

// FindOrNil mocks base method.
func (m *MockMasterRankingScopeMysqlRepository) FindOrNil(ctx context.Context, id int64) (*MasterRankingScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNil", ctx, id)
	ret0, _ := ret[0].(*MasterRankingScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNil indicates an expected call of FindOrNil.
func (mr *MockMasterRankingScopeMysqlRepositoryMockRecorder) FindOrNil(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNil", reflect.TypeOf((*MockMasterRankingScopeMysqlRepository)(nil).FindOrNil), ctx, id)
}

// FindOrNilByRankingScopeType mocks base method.
func (m *MockMasterRankingScopeMysqlRepository) FindOrNilByRankingScopeType(ctx context.Context, rankingScopeType enum.RankingScopeType) (*MasterRankingScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByRankingScopeType", ctx, rankingScopeType)
	ret0, _ := ret[0].(*MasterRankingScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByRankingScopeType indicates an expected call of FindOrNilByRankingScopeType.
func (mr *MockMasterRankingScopeMysqlRepositoryMockRecorder) FindOrNilByRankingScopeType(ctx, rankingScopeType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByRankingScopeType", reflect.TypeOf((*MockMasterRankingScopeMysqlRepository)(nil).FindOrNilByRankingScopeType), ctx, rankingScopeType)
}

// Update mocks base method.
func (m_2 *MockMasterRankingScopeMysqlRepository) Update(ctx context.Context, tx *gorm.DB, m *MasterRankingScope) (*MasterRankingScope, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, tx, m)
	ret0, _ := ret[0].(*MasterRankingScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMasterRankingScopeMysqlRepositoryMockRecorder) Update(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMasterRankingScopeMysqlRepository)(nil).Update), ctx, tx, m)
}
