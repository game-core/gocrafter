// Code generated by MockGen. DO NOT EDIT.
// Source: ./user_transaction_mysql_repository.gen.go

// Package userTransaction is a generated GoMock package.
package userTransaction

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockUserTransactionMysqlRepository is a mock of UserTransactionMysqlRepository interface.
type MockUserTransactionMysqlRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserTransactionMysqlRepositoryMockRecorder
}

// MockUserTransactionMysqlRepositoryMockRecorder is the mock recorder for MockUserTransactionMysqlRepository.
type MockUserTransactionMysqlRepositoryMockRecorder struct {
	mock *MockUserTransactionMysqlRepository
}

// NewMockUserTransactionMysqlRepository creates a new mock instance.
func NewMockUserTransactionMysqlRepository(ctrl *gomock.Controller) *MockUserTransactionMysqlRepository {
	mock := &MockUserTransactionMysqlRepository{ctrl: ctrl}
	mock.recorder = &MockUserTransactionMysqlRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserTransactionMysqlRepository) EXPECT() *MockUserTransactionMysqlRepositoryMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockUserTransactionMysqlRepository) Begin(ctx context.Context, shardKey string) (*gorm.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", ctx, shardKey)
	ret0, _ := ret[0].(*gorm.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockUserTransactionMysqlRepositoryMockRecorder) Begin(ctx, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockUserTransactionMysqlRepository)(nil).Begin), ctx, shardKey)
}

// Commit mocks base method.
func (m *MockUserTransactionMysqlRepository) Commit(ctx context.Context, tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockUserTransactionMysqlRepositoryMockRecorder) Commit(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockUserTransactionMysqlRepository)(nil).Commit), ctx, tx)
}

// Rollback mocks base method.
func (m *MockUserTransactionMysqlRepository) Rollback(ctx context.Context, tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockUserTransactionMysqlRepositoryMockRecorder) Rollback(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockUserTransactionMysqlRepository)(nil).Rollback), ctx, tx)
}
