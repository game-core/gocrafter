// Code generated by MockGen. DO NOT EDIT.
// Source: ./user_transaction_repository.go

// Package userTransaction is a generated GoMock package.
package userTransaction

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockUserTransactionRepository is a mock of UserTransactionRepository interface.
type MockUserTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserTransactionRepositoryMockRecorder
}

// MockUserTransactionRepositoryMockRecorder is the mock recorder for MockUserTransactionRepository.
type MockUserTransactionRepositoryMockRecorder struct {
	mock *MockUserTransactionRepository
}

// NewMockUserTransactionRepository creates a new mock instance.
func NewMockUserTransactionRepository(ctrl *gomock.Controller) *MockUserTransactionRepository {
	mock := &MockUserTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockUserTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserTransactionRepository) EXPECT() *MockUserTransactionRepositoryMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockUserTransactionRepository) Begin(ctx context.Context, shardKey string) (*gorm.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin", ctx, shardKey)
	ret0, _ := ret[0].(*gorm.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockUserTransactionRepositoryMockRecorder) Begin(ctx, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockUserTransactionRepository)(nil).Begin), ctx, shardKey)
}

// Commit mocks base method.
func (m *MockUserTransactionRepository) Commit(ctx context.Context, tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockUserTransactionRepositoryMockRecorder) Commit(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockUserTransactionRepository)(nil).Commit), ctx, tx)
}

// Rollback mocks base method.
func (m *MockUserTransactionRepository) Rollback(ctx context.Context, tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockUserTransactionRepositoryMockRecorder) Rollback(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockUserTransactionRepository)(nil).Rollback), ctx, tx)
}
