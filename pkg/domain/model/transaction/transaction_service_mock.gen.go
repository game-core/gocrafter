// Code generated by MockGen. DO NOT EDIT.
// Source: ./transaction_service.go

// Package transaction is a generated GoMock package.
package transaction

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	redis "github.com/redis/go-redis/v9"
	gorm "gorm.io/gorm"
)

// MockTransactionService is a mock of TransactionService interface.
type MockTransactionService struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionServiceMockRecorder
}

// MockTransactionServiceMockRecorder is the mock recorder for MockTransactionService.
type MockTransactionServiceMockRecorder struct {
	mock *MockTransactionService
}

// NewMockTransactionService creates a new mock instance.
func NewMockTransactionService(ctrl *gomock.Controller) *MockTransactionService {
	mock := &MockTransactionService{ctrl: ctrl}
	mock.recorder = &MockTransactionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionService) EXPECT() *MockTransactionServiceMockRecorder {
	return m.recorder
}

// CommonMysqlBegin mocks base method.
func (m *MockTransactionService) CommonMysqlBegin(ctx context.Context) (*gorm.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommonMysqlBegin", ctx)
	ret0, _ := ret[0].(*gorm.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CommonMysqlBegin indicates an expected call of CommonMysqlBegin.
func (mr *MockTransactionServiceMockRecorder) CommonMysqlBegin(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommonMysqlBegin", reflect.TypeOf((*MockTransactionService)(nil).CommonMysqlBegin), ctx)
}

// CommonMysqlEnd mocks base method.
func (m *MockTransactionService) CommonMysqlEnd(ctx context.Context, tx *gorm.DB, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CommonMysqlEnd", ctx, tx, err)
}

// CommonMysqlEnd indicates an expected call of CommonMysqlEnd.
func (mr *MockTransactionServiceMockRecorder) CommonMysqlEnd(ctx, tx, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommonMysqlEnd", reflect.TypeOf((*MockTransactionService)(nil).CommonMysqlEnd), ctx, tx, err)
}

// MasterMysqlBegin mocks base method.
func (m *MockTransactionService) MasterMysqlBegin(ctx context.Context) (*gorm.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MasterMysqlBegin", ctx)
	ret0, _ := ret[0].(*gorm.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MasterMysqlBegin indicates an expected call of MasterMysqlBegin.
func (mr *MockTransactionServiceMockRecorder) MasterMysqlBegin(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MasterMysqlBegin", reflect.TypeOf((*MockTransactionService)(nil).MasterMysqlBegin), ctx)
}

// MasterMysqlEnd mocks base method.
func (m *MockTransactionService) MasterMysqlEnd(ctx context.Context, tx *gorm.DB, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MasterMysqlEnd", ctx, tx, err)
}

// MasterMysqlEnd indicates an expected call of MasterMysqlEnd.
func (mr *MockTransactionServiceMockRecorder) MasterMysqlEnd(ctx, tx, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MasterMysqlEnd", reflect.TypeOf((*MockTransactionService)(nil).MasterMysqlEnd), ctx, tx, err)
}

// MultiUserMysqlBegin mocks base method.
func (m *MockTransactionService) MultiUserMysqlBegin(ctx context.Context, userIds []string) (map[string]*gorm.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MultiUserMysqlBegin", ctx, userIds)
	ret0, _ := ret[0].(map[string]*gorm.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MultiUserMysqlBegin indicates an expected call of MultiUserMysqlBegin.
func (mr *MockTransactionServiceMockRecorder) MultiUserMysqlBegin(ctx, userIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiUserMysqlBegin", reflect.TypeOf((*MockTransactionService)(nil).MultiUserMysqlBegin), ctx, userIds)
}

// MultiUserMysqlEnd mocks base method.
func (m *MockTransactionService) MultiUserMysqlEnd(ctx context.Context, txs map[string]*gorm.DB, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MultiUserMysqlEnd", ctx, txs, err)
}

// MultiUserMysqlEnd indicates an expected call of MultiUserMysqlEnd.
func (mr *MockTransactionServiceMockRecorder) MultiUserMysqlEnd(ctx, txs, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiUserMysqlEnd", reflect.TypeOf((*MockTransactionService)(nil).MultiUserMysqlEnd), ctx, txs, err)
}

// UserMysqlBegin mocks base method.
func (m *MockTransactionService) UserMysqlBegin(ctx context.Context, userId string) (*gorm.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserMysqlBegin", ctx, userId)
	ret0, _ := ret[0].(*gorm.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserMysqlBegin indicates an expected call of UserMysqlBegin.
func (mr *MockTransactionServiceMockRecorder) UserMysqlBegin(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserMysqlBegin", reflect.TypeOf((*MockTransactionService)(nil).UserMysqlBegin), ctx, userId)
}

// UserMysqlEnd mocks base method.
func (m *MockTransactionService) UserMysqlEnd(ctx context.Context, tx *gorm.DB, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UserMysqlEnd", ctx, tx, err)
}

// UserMysqlEnd indicates an expected call of UserMysqlEnd.
func (mr *MockTransactionServiceMockRecorder) UserMysqlEnd(ctx, tx, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserMysqlEnd", reflect.TypeOf((*MockTransactionService)(nil).UserMysqlEnd), ctx, tx, err)
}

// UserRedisBegin mocks base method.
func (m *MockTransactionService) UserRedisBegin() redis.Pipeliner {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRedisBegin")
	ret0, _ := ret[0].(redis.Pipeliner)
	return ret0
}

// UserRedisBegin indicates an expected call of UserRedisBegin.
func (mr *MockTransactionServiceMockRecorder) UserRedisBegin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRedisBegin", reflect.TypeOf((*MockTransactionService)(nil).UserRedisBegin))
}

// UserRedisEnd mocks base method.
func (m *MockTransactionService) UserRedisEnd(ctx context.Context, tx redis.Pipeliner, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UserRedisEnd", ctx, tx, err)
}

// UserRedisEnd indicates an expected call of UserRedisEnd.
func (mr *MockTransactionServiceMockRecorder) UserRedisEnd(ctx, tx, err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRedisEnd", reflect.TypeOf((*MockTransactionService)(nil).UserRedisEnd), ctx, tx, err)
}
