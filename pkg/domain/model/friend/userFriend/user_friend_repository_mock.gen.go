// Code generated by MockGen. DO NOT EDIT.
// Source: ./user_friend_repository.gen.go

// Package userFriend is a generated GoMock package.
package userFriend

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockUserFriendRepository is a mock of UserFriendRepository interface.
type MockUserFriendRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserFriendRepositoryMockRecorder
}

// MockUserFriendRepositoryMockRecorder is the mock recorder for MockUserFriendRepository.
type MockUserFriendRepositoryMockRecorder struct {
	mock *MockUserFriendRepository
}

// NewMockUserFriendRepository creates a new mock instance.
func NewMockUserFriendRepository(ctrl *gomock.Controller) *MockUserFriendRepository {
	mock := &MockUserFriendRepository{ctrl: ctrl}
	mock.recorder = &MockUserFriendRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserFriendRepository) EXPECT() *MockUserFriendRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockUserFriendRepository) Create(ctx context.Context, tx *gorm.DB, m *UserFriend) (*UserFriend, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, tx, m)
	ret0, _ := ret[0].(*UserFriend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserFriendRepositoryMockRecorder) Create(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserFriendRepository)(nil).Create), ctx, tx, m)
}

// CreateList mocks base method.
func (m *MockUserFriendRepository) CreateList(ctx context.Context, tx *gorm.DB, ms UserFriends) (UserFriends, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", ctx, tx, ms)
	ret0, _ := ret[0].(UserFriends)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateList indicates an expected call of CreateList.
func (mr *MockUserFriendRepositoryMockRecorder) CreateList(ctx, tx, ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockUserFriendRepository)(nil).CreateList), ctx, tx, ms)
}

// Delete mocks base method.
func (m_2 *MockUserFriendRepository) Delete(ctx context.Context, tx *gorm.DB, m *UserFriend) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Delete", ctx, tx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserFriendRepositoryMockRecorder) Delete(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserFriendRepository)(nil).Delete), ctx, tx, m)
}

// Find mocks base method.
func (m *MockUserFriendRepository) Find(ctx context.Context, userId, friendUserId string) (*UserFriend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, userId, friendUserId)
	ret0, _ := ret[0].(*UserFriend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockUserFriendRepositoryMockRecorder) Find(ctx, userId, friendUserId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUserFriendRepository)(nil).Find), ctx, userId, friendUserId)
}

// FindList mocks base method.
func (m *MockUserFriendRepository) FindList(ctx context.Context, userId string) (UserFriends, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindList", ctx, userId)
	ret0, _ := ret[0].(UserFriends)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindList indicates an expected call of FindList.
func (mr *MockUserFriendRepositoryMockRecorder) FindList(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindList", reflect.TypeOf((*MockUserFriendRepository)(nil).FindList), ctx, userId)
}

// FindOrNil mocks base method.
func (m *MockUserFriendRepository) FindOrNil(ctx context.Context, userId, friendUserId string) (*UserFriend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNil", ctx, userId, friendUserId)
	ret0, _ := ret[0].(*UserFriend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNil indicates an expected call of FindOrNil.
func (mr *MockUserFriendRepositoryMockRecorder) FindOrNil(ctx, userId, friendUserId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNil", reflect.TypeOf((*MockUserFriendRepository)(nil).FindOrNil), ctx, userId, friendUserId)
}

// Update mocks base method.
func (m_2 *MockUserFriendRepository) Update(ctx context.Context, tx *gorm.DB, m *UserFriend) (*UserFriend, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, tx, m)
	ret0, _ := ret[0].(*UserFriend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserFriendRepositoryMockRecorder) Update(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserFriendRepository)(nil).Update), ctx, tx, m)
}
