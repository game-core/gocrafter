// Code generated by MockGen. DO NOT EDIT.
// Source: ./master_resource_mysql_repository.gen.go

// Package masterResource is a generated GoMock package.
package masterResource

import (
	context "context"
	reflect "reflect"

	enum "github.com/game-core/gocrafter/pkg/domain/enum"
	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockMasterResourceMysqlRepository is a mock of MasterResourceMysqlRepository interface.
type MockMasterResourceMysqlRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMasterResourceMysqlRepositoryMockRecorder
}

// MockMasterResourceMysqlRepositoryMockRecorder is the mock recorder for MockMasterResourceMysqlRepository.
type MockMasterResourceMysqlRepositoryMockRecorder struct {
	mock *MockMasterResourceMysqlRepository
}

// NewMockMasterResourceMysqlRepository creates a new mock instance.
func NewMockMasterResourceMysqlRepository(ctrl *gomock.Controller) *MockMasterResourceMysqlRepository {
	mock := &MockMasterResourceMysqlRepository{ctrl: ctrl}
	mock.recorder = &MockMasterResourceMysqlRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMasterResourceMysqlRepository) EXPECT() *MockMasterResourceMysqlRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockMasterResourceMysqlRepository) Create(ctx context.Context, tx *gorm.DB, m *MasterResource) (*MasterResource, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, tx, m)
	ret0, _ := ret[0].(*MasterResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMasterResourceMysqlRepositoryMockRecorder) Create(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMasterResourceMysqlRepository)(nil).Create), ctx, tx, m)
}

// CreateList mocks base method.
func (m *MockMasterResourceMysqlRepository) CreateList(ctx context.Context, tx *gorm.DB, ms MasterResources) (MasterResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", ctx, tx, ms)
	ret0, _ := ret[0].(MasterResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateList indicates an expected call of CreateList.
func (mr *MockMasterResourceMysqlRepositoryMockRecorder) CreateList(ctx, tx, ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockMasterResourceMysqlRepository)(nil).CreateList), ctx, tx, ms)
}

// Delete mocks base method.
func (m_2 *MockMasterResourceMysqlRepository) Delete(ctx context.Context, tx *gorm.DB, m *MasterResource) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Delete", ctx, tx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMasterResourceMysqlRepositoryMockRecorder) Delete(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMasterResourceMysqlRepository)(nil).Delete), ctx, tx, m)
}

// Find mocks base method.
func (m *MockMasterResourceMysqlRepository) Find(ctx context.Context, id int64) (*MasterResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id)
	ret0, _ := ret[0].(*MasterResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockMasterResourceMysqlRepositoryMockRecorder) Find(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMasterResourceMysqlRepository)(nil).Find), ctx, id)
}

// FindByResourceType mocks base method.
func (m *MockMasterResourceMysqlRepository) FindByResourceType(ctx context.Context, resourceType enum.ResourceType) (*MasterResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByResourceType", ctx, resourceType)
	ret0, _ := ret[0].(*MasterResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByResourceType indicates an expected call of FindByResourceType.
func (mr *MockMasterResourceMysqlRepositoryMockRecorder) FindByResourceType(ctx, resourceType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByResourceType", reflect.TypeOf((*MockMasterResourceMysqlRepository)(nil).FindByResourceType), ctx, resourceType)
}

// FindList mocks base method.
func (m *MockMasterResourceMysqlRepository) FindList(ctx context.Context) (MasterResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindList", ctx)
	ret0, _ := ret[0].(MasterResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindList indicates an expected call of FindList.
func (mr *MockMasterResourceMysqlRepositoryMockRecorder) FindList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindList", reflect.TypeOf((*MockMasterResourceMysqlRepository)(nil).FindList), ctx)
}

// FindListByResourceType mocks base method.
func (m *MockMasterResourceMysqlRepository) FindListByResourceType(ctx context.Context, resourceType enum.ResourceType) (MasterResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByResourceType", ctx, resourceType)
	ret0, _ := ret[0].(MasterResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByResourceType indicates an expected call of FindListByResourceType.
func (mr *MockMasterResourceMysqlRepositoryMockRecorder) FindListByResourceType(ctx, resourceType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByResourceType", reflect.TypeOf((*MockMasterResourceMysqlRepository)(nil).FindListByResourceType), ctx, resourceType)
}

// FindOrNil mocks base method.
func (m *MockMasterResourceMysqlRepository) FindOrNil(ctx context.Context, id int64) (*MasterResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNil", ctx, id)
	ret0, _ := ret[0].(*MasterResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNil indicates an expected call of FindOrNil.
func (mr *MockMasterResourceMysqlRepositoryMockRecorder) FindOrNil(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNil", reflect.TypeOf((*MockMasterResourceMysqlRepository)(nil).FindOrNil), ctx, id)
}

// FindOrNilByResourceType mocks base method.
func (m *MockMasterResourceMysqlRepository) FindOrNilByResourceType(ctx context.Context, resourceType enum.ResourceType) (*MasterResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByResourceType", ctx, resourceType)
	ret0, _ := ret[0].(*MasterResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByResourceType indicates an expected call of FindOrNilByResourceType.
func (mr *MockMasterResourceMysqlRepositoryMockRecorder) FindOrNilByResourceType(ctx, resourceType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByResourceType", reflect.TypeOf((*MockMasterResourceMysqlRepository)(nil).FindOrNilByResourceType), ctx, resourceType)
}

// Update mocks base method.
func (m_2 *MockMasterResourceMysqlRepository) Update(ctx context.Context, tx *gorm.DB, m *MasterResource) (*MasterResource, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, tx, m)
	ret0, _ := ret[0].(*MasterResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMasterResourceMysqlRepositoryMockRecorder) Update(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMasterResourceMysqlRepository)(nil).Update), ctx, tx, m)
}
