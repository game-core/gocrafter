// Code generated by MockGen. DO NOT EDIT.
// Source: ./user_login_bonus_repository.gen.go

// Package userLoginBonus is a generated GoMock package.
package userLoginBonus

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockUserLoginBonusRepository is a mock of UserLoginBonusRepository interface.
type MockUserLoginBonusRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserLoginBonusRepositoryMockRecorder
}

// MockUserLoginBonusRepositoryMockRecorder is the mock recorder for MockUserLoginBonusRepository.
type MockUserLoginBonusRepositoryMockRecorder struct {
	mock *MockUserLoginBonusRepository
}

// NewMockUserLoginBonusRepository creates a new mock instance.
func NewMockUserLoginBonusRepository(ctrl *gomock.Controller) *MockUserLoginBonusRepository {
	mock := &MockUserLoginBonusRepository{ctrl: ctrl}
	mock.recorder = &MockUserLoginBonusRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserLoginBonusRepository) EXPECT() *MockUserLoginBonusRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockUserLoginBonusRepository) Create(ctx context.Context, tx *gorm.DB, m *UserLoginBonus) (*UserLoginBonus, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, tx, m)
	ret0, _ := ret[0].(*UserLoginBonus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserLoginBonusRepositoryMockRecorder) Create(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserLoginBonusRepository)(nil).Create), ctx, tx, m)
}

// CreateList mocks base method.
func (m *MockUserLoginBonusRepository) CreateList(ctx context.Context, tx *gorm.DB, ms UserLoginBonuses) (UserLoginBonuses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", ctx, tx, ms)
	ret0, _ := ret[0].(UserLoginBonuses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateList indicates an expected call of CreateList.
func (mr *MockUserLoginBonusRepositoryMockRecorder) CreateList(ctx, tx, ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockUserLoginBonusRepository)(nil).CreateList), ctx, tx, ms)
}

// Delete mocks base method.
func (m_2 *MockUserLoginBonusRepository) Delete(ctx context.Context, tx *gorm.DB, m *UserLoginBonus) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Delete", ctx, tx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserLoginBonusRepositoryMockRecorder) Delete(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserLoginBonusRepository)(nil).Delete), ctx, tx, m)
}

// FindOrNilByUserId mocks base method.
func (m *MockUserLoginBonusRepository) FindOrNilByUserId(ctx context.Context, userId string) (*UserLoginBonus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByUserId", ctx, userId)
	ret0, _ := ret[0].(*UserLoginBonus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByUserId indicates an expected call of FindOrNilByUserId.
func (mr *MockUserLoginBonusRepositoryMockRecorder) FindOrNilByUserId(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByUserId", reflect.TypeOf((*MockUserLoginBonusRepository)(nil).FindOrNilByUserId), ctx, userId)
}

// FindOrNilByUserIdAndMasterLoginBonusId mocks base method.
func (m *MockUserLoginBonusRepository) FindOrNilByUserIdAndMasterLoginBonusId(ctx context.Context, userId string, masterLoginBonusId int64) (*UserLoginBonus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByUserIdAndMasterLoginBonusId", ctx, userId, masterLoginBonusId)
	ret0, _ := ret[0].(*UserLoginBonus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByUserIdAndMasterLoginBonusId indicates an expected call of FindOrNilByUserIdAndMasterLoginBonusId.
func (mr *MockUserLoginBonusRepositoryMockRecorder) FindOrNilByUserIdAndMasterLoginBonusId(ctx, userId, masterLoginBonusId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByUserIdAndMasterLoginBonusId", reflect.TypeOf((*MockUserLoginBonusRepository)(nil).FindOrNilByUserIdAndMasterLoginBonusId), ctx, userId, masterLoginBonusId)
}

// Find mocks base method.
func (m *MockUserLoginBonusRepository) Find(ctx context.Context, userId string, masterLoginBonusId int64) (*UserLoginBonus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, userId, masterLoginBonusId)
	ret0, _ := ret[0].(*UserLoginBonus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockUserLoginBonusRepositoryMockRecorder) Find(ctx, userId, masterLoginBonusId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUserLoginBonusRepository)(nil).Find), ctx, userId, masterLoginBonusId)
}

// FindByUserId mocks base method.
func (m *MockUserLoginBonusRepository) FindByUserId(ctx context.Context, userId string) (*UserLoginBonus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", ctx, userId)
	ret0, _ := ret[0].(*UserLoginBonus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockUserLoginBonusRepositoryMockRecorder) FindByUserId(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockUserLoginBonusRepository)(nil).FindByUserId), ctx, userId)
}

// FindByUserIdAndMasterLoginBonusId mocks base method.
func (m *MockUserLoginBonusRepository) FindByUserIdAndMasterLoginBonusId(ctx context.Context, userId string, masterLoginBonusId int64) (*UserLoginBonus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserIdAndMasterLoginBonusId", ctx, userId, masterLoginBonusId)
	ret0, _ := ret[0].(*UserLoginBonus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserIdAndMasterLoginBonusId indicates an expected call of FindByUserIdAndMasterLoginBonusId.
func (mr *MockUserLoginBonusRepositoryMockRecorder) FindByUserIdAndMasterLoginBonusId(ctx, userId, masterLoginBonusId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserIdAndMasterLoginBonusId", reflect.TypeOf((*MockUserLoginBonusRepository)(nil).FindByUserIdAndMasterLoginBonusId), ctx, userId, masterLoginBonusId)
}

// FindList mocks base method.
func (m *MockUserLoginBonusRepository) FindList(ctx context.Context, userId string) (UserLoginBonuses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindList", ctx, userId)
	ret0, _ := ret[0].(UserLoginBonuses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindList indicates an expected call of FindList.
func (mr *MockUserLoginBonusRepositoryMockRecorder) FindList(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindList", reflect.TypeOf((*MockUserLoginBonusRepository)(nil).FindList), ctx, userId)
}

// FindListByUserId mocks base method.
func (m *MockUserLoginBonusRepository) FindListByUserId(ctx context.Context, userId string) (UserLoginBonuses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByUserId", ctx, userId)
	ret0, _ := ret[0].(UserLoginBonuses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByUserId indicates an expected call of FindListByUserId.
func (mr *MockUserLoginBonusRepositoryMockRecorder) FindListByUserId(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByUserId", reflect.TypeOf((*MockUserLoginBonusRepository)(nil).FindListByUserId), ctx, userId)
}

// FindListByUserIdAndMasterLoginBonusId mocks base method.
func (m *MockUserLoginBonusRepository) FindListByUserIdAndMasterLoginBonusId(ctx context.Context, userId string, masterLoginBonusId int64) (UserLoginBonuses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByUserIdAndMasterLoginBonusId", ctx, userId, masterLoginBonusId)
	ret0, _ := ret[0].(UserLoginBonuses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByUserIdAndMasterLoginBonusId indicates an expected call of FindListByUserIdAndMasterLoginBonusId.
func (mr *MockUserLoginBonusRepositoryMockRecorder) FindListByUserIdAndMasterLoginBonusId(ctx, userId, masterLoginBonusId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByUserIdAndMasterLoginBonusId", reflect.TypeOf((*MockUserLoginBonusRepository)(nil).FindListByUserIdAndMasterLoginBonusId), ctx, userId, masterLoginBonusId)
}

// FindOrNil mocks base method.
func (m *MockUserLoginBonusRepository) FindOrNil(ctx context.Context, userId string, masterLoginBonusId int64) (*UserLoginBonus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNil", ctx, userId, masterLoginBonusId)
	ret0, _ := ret[0].(*UserLoginBonus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNil indicates an expected call of FindOrNil.
func (mr *MockUserLoginBonusRepositoryMockRecorder) FindOrNil(ctx, userId, masterLoginBonusId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNil", reflect.TypeOf((*MockUserLoginBonusRepository)(nil).FindOrNil), ctx, userId, masterLoginBonusId)
}

// Update mocks base method.
func (m_2 *MockUserLoginBonusRepository) Update(ctx context.Context, tx *gorm.DB, m *UserLoginBonus) (*UserLoginBonus, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, tx, m)
	ret0, _ := ret[0].(*UserLoginBonus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserLoginBonusRepositoryMockRecorder) Update(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserLoginBonusRepository)(nil).Update), ctx, tx, m)
}
