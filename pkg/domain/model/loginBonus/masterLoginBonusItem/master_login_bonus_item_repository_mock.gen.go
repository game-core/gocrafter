// Code generated by MockGen. DO NOT EDIT.
// Source: ./master_login_bonus_item_repository.gen.go

// Package masterLoginBonusItem is a generated GoMock package.
package masterLoginBonusItem

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockMasterLoginBonusItemMysqlRepository is a mock of MasterLoginBonusItemMysqlRepository interface.
type MockMasterLoginBonusItemMysqlRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMasterLoginBonusItemMysqlRepositoryMockRecorder
}

// MockMasterLoginBonusItemMysqlRepositoryMockRecorder is the mock recorder for MockMasterLoginBonusItemMysqlRepository.
type MockMasterLoginBonusItemMysqlRepositoryMockRecorder struct {
	mock *MockMasterLoginBonusItemMysqlRepository
}

// NewMockMasterLoginBonusItemMysqlRepository creates a new mock instance.
func NewMockMasterLoginBonusItemMysqlRepository(ctrl *gomock.Controller) *MockMasterLoginBonusItemMysqlRepository {
	mock := &MockMasterLoginBonusItemMysqlRepository{ctrl: ctrl}
	mock.recorder = &MockMasterLoginBonusItemMysqlRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMasterLoginBonusItemMysqlRepository) EXPECT() *MockMasterLoginBonusItemMysqlRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockMasterLoginBonusItemMysqlRepository) Create(ctx context.Context, tx *gorm.DB, m *MasterLoginBonusItem) (*MasterLoginBonusItem, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, tx, m)
	ret0, _ := ret[0].(*MasterLoginBonusItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMasterLoginBonusItemMysqlRepositoryMockRecorder) Create(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMasterLoginBonusItemMysqlRepository)(nil).Create), ctx, tx, m)
}

// CreateList mocks base method.
func (m *MockMasterLoginBonusItemMysqlRepository) CreateList(ctx context.Context, tx *gorm.DB, ms MasterLoginBonusItems) (MasterLoginBonusItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", ctx, tx, ms)
	ret0, _ := ret[0].(MasterLoginBonusItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateList indicates an expected call of CreateList.
func (mr *MockMasterLoginBonusItemMysqlRepositoryMockRecorder) CreateList(ctx, tx, ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockMasterLoginBonusItemMysqlRepository)(nil).CreateList), ctx, tx, ms)
}

// Delete mocks base method.
func (m_2 *MockMasterLoginBonusItemMysqlRepository) Delete(ctx context.Context, tx *gorm.DB, m *MasterLoginBonusItem) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Delete", ctx, tx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMasterLoginBonusItemMysqlRepositoryMockRecorder) Delete(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMasterLoginBonusItemMysqlRepository)(nil).Delete), ctx, tx, m)
}

// Find mocks base method.
func (m *MockMasterLoginBonusItemMysqlRepository) Find(ctx context.Context, id int64) (*MasterLoginBonusItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id)
	ret0, _ := ret[0].(*MasterLoginBonusItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockMasterLoginBonusItemMysqlRepositoryMockRecorder) Find(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMasterLoginBonusItemMysqlRepository)(nil).Find), ctx, id)
}

// FindByMasterItemId mocks base method.
func (m *MockMasterLoginBonusItemMysqlRepository) FindByMasterItemId(ctx context.Context, masterItemId int64) (*MasterLoginBonusItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByMasterItemId", ctx, masterItemId)
	ret0, _ := ret[0].(*MasterLoginBonusItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByMasterItemId indicates an expected call of FindByMasterItemId.
func (mr *MockMasterLoginBonusItemMysqlRepositoryMockRecorder) FindByMasterItemId(ctx, masterItemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByMasterItemId", reflect.TypeOf((*MockMasterLoginBonusItemMysqlRepository)(nil).FindByMasterItemId), ctx, masterItemId)
}

// FindByMasterLoginBonusScheduleId mocks base method.
func (m *MockMasterLoginBonusItemMysqlRepository) FindByMasterLoginBonusScheduleId(ctx context.Context, masterLoginBonusScheduleId int64) (*MasterLoginBonusItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByMasterLoginBonusScheduleId", ctx, masterLoginBonusScheduleId)
	ret0, _ := ret[0].(*MasterLoginBonusItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByMasterLoginBonusScheduleId indicates an expected call of FindByMasterLoginBonusScheduleId.
func (mr *MockMasterLoginBonusItemMysqlRepositoryMockRecorder) FindByMasterLoginBonusScheduleId(ctx, masterLoginBonusScheduleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByMasterLoginBonusScheduleId", reflect.TypeOf((*MockMasterLoginBonusItemMysqlRepository)(nil).FindByMasterLoginBonusScheduleId), ctx, masterLoginBonusScheduleId)
}

// FindByMasterLoginBonusScheduleIdAndMasterItemId mocks base method.
func (m *MockMasterLoginBonusItemMysqlRepository) FindByMasterLoginBonusScheduleIdAndMasterItemId(ctx context.Context, masterLoginBonusScheduleId, masterItemId int64) (*MasterLoginBonusItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByMasterLoginBonusScheduleIdAndMasterItemId", ctx, masterLoginBonusScheduleId, masterItemId)
	ret0, _ := ret[0].(*MasterLoginBonusItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByMasterLoginBonusScheduleIdAndMasterItemId indicates an expected call of FindByMasterLoginBonusScheduleIdAndMasterItemId.
func (mr *MockMasterLoginBonusItemMysqlRepositoryMockRecorder) FindByMasterLoginBonusScheduleIdAndMasterItemId(ctx, masterLoginBonusScheduleId, masterItemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByMasterLoginBonusScheduleIdAndMasterItemId", reflect.TypeOf((*MockMasterLoginBonusItemMysqlRepository)(nil).FindByMasterLoginBonusScheduleIdAndMasterItemId), ctx, masterLoginBonusScheduleId, masterItemId)
}

// FindList mocks base method.
func (m *MockMasterLoginBonusItemMysqlRepository) FindList(ctx context.Context) (MasterLoginBonusItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindList", ctx)
	ret0, _ := ret[0].(MasterLoginBonusItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindList indicates an expected call of FindList.
func (mr *MockMasterLoginBonusItemMysqlRepositoryMockRecorder) FindList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindList", reflect.TypeOf((*MockMasterLoginBonusItemMysqlRepository)(nil).FindList), ctx)
}

// FindListByMasterItemId mocks base method.
func (m *MockMasterLoginBonusItemMysqlRepository) FindListByMasterItemId(ctx context.Context, masterItemId int64) (MasterLoginBonusItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByMasterItemId", ctx, masterItemId)
	ret0, _ := ret[0].(MasterLoginBonusItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByMasterItemId indicates an expected call of FindListByMasterItemId.
func (mr *MockMasterLoginBonusItemMysqlRepositoryMockRecorder) FindListByMasterItemId(ctx, masterItemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByMasterItemId", reflect.TypeOf((*MockMasterLoginBonusItemMysqlRepository)(nil).FindListByMasterItemId), ctx, masterItemId)
}

// FindListByMasterLoginBonusScheduleId mocks base method.
func (m *MockMasterLoginBonusItemMysqlRepository) FindListByMasterLoginBonusScheduleId(ctx context.Context, masterLoginBonusScheduleId int64) (MasterLoginBonusItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByMasterLoginBonusScheduleId", ctx, masterLoginBonusScheduleId)
	ret0, _ := ret[0].(MasterLoginBonusItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByMasterLoginBonusScheduleId indicates an expected call of FindListByMasterLoginBonusScheduleId.
func (mr *MockMasterLoginBonusItemMysqlRepositoryMockRecorder) FindListByMasterLoginBonusScheduleId(ctx, masterLoginBonusScheduleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByMasterLoginBonusScheduleId", reflect.TypeOf((*MockMasterLoginBonusItemMysqlRepository)(nil).FindListByMasterLoginBonusScheduleId), ctx, masterLoginBonusScheduleId)
}

// FindListByMasterLoginBonusScheduleIdAndMasterItemId mocks base method.
func (m *MockMasterLoginBonusItemMysqlRepository) FindListByMasterLoginBonusScheduleIdAndMasterItemId(ctx context.Context, masterLoginBonusScheduleId, masterItemId int64) (MasterLoginBonusItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByMasterLoginBonusScheduleIdAndMasterItemId", ctx, masterLoginBonusScheduleId, masterItemId)
	ret0, _ := ret[0].(MasterLoginBonusItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByMasterLoginBonusScheduleIdAndMasterItemId indicates an expected call of FindListByMasterLoginBonusScheduleIdAndMasterItemId.
func (mr *MockMasterLoginBonusItemMysqlRepositoryMockRecorder) FindListByMasterLoginBonusScheduleIdAndMasterItemId(ctx, masterLoginBonusScheduleId, masterItemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByMasterLoginBonusScheduleIdAndMasterItemId", reflect.TypeOf((*MockMasterLoginBonusItemMysqlRepository)(nil).FindListByMasterLoginBonusScheduleIdAndMasterItemId), ctx, masterLoginBonusScheduleId, masterItemId)
}

// FindOrNil mocks base method.
func (m *MockMasterLoginBonusItemMysqlRepository) FindOrNil(ctx context.Context, id int64) (*MasterLoginBonusItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNil", ctx, id)
	ret0, _ := ret[0].(*MasterLoginBonusItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNil indicates an expected call of FindOrNil.
func (mr *MockMasterLoginBonusItemMysqlRepositoryMockRecorder) FindOrNil(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNil", reflect.TypeOf((*MockMasterLoginBonusItemMysqlRepository)(nil).FindOrNil), ctx, id)
}

// FindOrNilByMasterItemId mocks base method.
func (m *MockMasterLoginBonusItemMysqlRepository) FindOrNilByMasterItemId(ctx context.Context, masterItemId int64) (*MasterLoginBonusItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByMasterItemId", ctx, masterItemId)
	ret0, _ := ret[0].(*MasterLoginBonusItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByMasterItemId indicates an expected call of FindOrNilByMasterItemId.
func (mr *MockMasterLoginBonusItemMysqlRepositoryMockRecorder) FindOrNilByMasterItemId(ctx, masterItemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByMasterItemId", reflect.TypeOf((*MockMasterLoginBonusItemMysqlRepository)(nil).FindOrNilByMasterItemId), ctx, masterItemId)
}

// FindOrNilByMasterLoginBonusScheduleId mocks base method.
func (m *MockMasterLoginBonusItemMysqlRepository) FindOrNilByMasterLoginBonusScheduleId(ctx context.Context, masterLoginBonusScheduleId int64) (*MasterLoginBonusItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByMasterLoginBonusScheduleId", ctx, masterLoginBonusScheduleId)
	ret0, _ := ret[0].(*MasterLoginBonusItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByMasterLoginBonusScheduleId indicates an expected call of FindOrNilByMasterLoginBonusScheduleId.
func (mr *MockMasterLoginBonusItemMysqlRepositoryMockRecorder) FindOrNilByMasterLoginBonusScheduleId(ctx, masterLoginBonusScheduleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByMasterLoginBonusScheduleId", reflect.TypeOf((*MockMasterLoginBonusItemMysqlRepository)(nil).FindOrNilByMasterLoginBonusScheduleId), ctx, masterLoginBonusScheduleId)
}

// FindOrNilByMasterLoginBonusScheduleIdAndMasterItemId mocks base method.
func (m *MockMasterLoginBonusItemMysqlRepository) FindOrNilByMasterLoginBonusScheduleIdAndMasterItemId(ctx context.Context, masterLoginBonusScheduleId, masterItemId int64) (*MasterLoginBonusItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByMasterLoginBonusScheduleIdAndMasterItemId", ctx, masterLoginBonusScheduleId, masterItemId)
	ret0, _ := ret[0].(*MasterLoginBonusItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByMasterLoginBonusScheduleIdAndMasterItemId indicates an expected call of FindOrNilByMasterLoginBonusScheduleIdAndMasterItemId.
func (mr *MockMasterLoginBonusItemMysqlRepositoryMockRecorder) FindOrNilByMasterLoginBonusScheduleIdAndMasterItemId(ctx, masterLoginBonusScheduleId, masterItemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByMasterLoginBonusScheduleIdAndMasterItemId", reflect.TypeOf((*MockMasterLoginBonusItemMysqlRepository)(nil).FindOrNilByMasterLoginBonusScheduleIdAndMasterItemId), ctx, masterLoginBonusScheduleId, masterItemId)
}

// Update mocks base method.
func (m_2 *MockMasterLoginBonusItemMysqlRepository) Update(ctx context.Context, tx *gorm.DB, m *MasterLoginBonusItem) (*MasterLoginBonusItem, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, tx, m)
	ret0, _ := ret[0].(*MasterLoginBonusItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMasterLoginBonusItemMysqlRepositoryMockRecorder) Update(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMasterLoginBonusItemMysqlRepository)(nil).Update), ctx, tx, m)
}
