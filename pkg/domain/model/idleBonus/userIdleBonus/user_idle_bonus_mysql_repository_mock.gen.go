// Code generated by MockGen. DO NOT EDIT.
// Source: ./user_idle_bonus_mysql_repository.gen.go

// Package userIdleBonus is a generated GoMock package.
package userIdleBonus

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockUserIdleBonusMysqlRepository is a mock of UserIdleBonusMysqlRepository interface.
type MockUserIdleBonusMysqlRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserIdleBonusMysqlRepositoryMockRecorder
}

// MockUserIdleBonusMysqlRepositoryMockRecorder is the mock recorder for MockUserIdleBonusMysqlRepository.
type MockUserIdleBonusMysqlRepositoryMockRecorder struct {
	mock *MockUserIdleBonusMysqlRepository
}

// NewMockUserIdleBonusMysqlRepository creates a new mock instance.
func NewMockUserIdleBonusMysqlRepository(ctrl *gomock.Controller) *MockUserIdleBonusMysqlRepository {
	mock := &MockUserIdleBonusMysqlRepository{ctrl: ctrl}
	mock.recorder = &MockUserIdleBonusMysqlRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserIdleBonusMysqlRepository) EXPECT() *MockUserIdleBonusMysqlRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockUserIdleBonusMysqlRepository) Create(ctx context.Context, tx *gorm.DB, m *UserIdleBonus) (*UserIdleBonus, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, tx, m)
	ret0, _ := ret[0].(*UserIdleBonus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserIdleBonusMysqlRepositoryMockRecorder) Create(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserIdleBonusMysqlRepository)(nil).Create), ctx, tx, m)
}

// CreateList mocks base method.
func (m *MockUserIdleBonusMysqlRepository) CreateList(ctx context.Context, tx *gorm.DB, ms UserIdleBonuses) (UserIdleBonuses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", ctx, tx, ms)
	ret0, _ := ret[0].(UserIdleBonuses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateList indicates an expected call of CreateList.
func (mr *MockUserIdleBonusMysqlRepositoryMockRecorder) CreateList(ctx, tx, ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockUserIdleBonusMysqlRepository)(nil).CreateList), ctx, tx, ms)
}

// Delete mocks base method.
func (m_2 *MockUserIdleBonusMysqlRepository) Delete(ctx context.Context, tx *gorm.DB, m *UserIdleBonus) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Delete", ctx, tx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUserIdleBonusMysqlRepositoryMockRecorder) Delete(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserIdleBonusMysqlRepository)(nil).Delete), ctx, tx, m)
}

// Find mocks base method.
func (m *MockUserIdleBonusMysqlRepository) Find(ctx context.Context, userId string, masterIdleBonusId int64) (*UserIdleBonus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, userId, masterIdleBonusId)
	ret0, _ := ret[0].(*UserIdleBonus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockUserIdleBonusMysqlRepositoryMockRecorder) Find(ctx, userId, masterIdleBonusId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUserIdleBonusMysqlRepository)(nil).Find), ctx, userId, masterIdleBonusId)
}

// FindByUserId mocks base method.
func (m *MockUserIdleBonusMysqlRepository) FindByUserId(ctx context.Context, userId string) (*UserIdleBonus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserId", ctx, userId)
	ret0, _ := ret[0].(*UserIdleBonus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserId indicates an expected call of FindByUserId.
func (mr *MockUserIdleBonusMysqlRepositoryMockRecorder) FindByUserId(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserId", reflect.TypeOf((*MockUserIdleBonusMysqlRepository)(nil).FindByUserId), ctx, userId)
}

// FindByUserIdAndMasterIdleBonusId mocks base method.
func (m *MockUserIdleBonusMysqlRepository) FindByUserIdAndMasterIdleBonusId(ctx context.Context, userId string, masterIdleBonusId int64) (*UserIdleBonus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserIdAndMasterIdleBonusId", ctx, userId, masterIdleBonusId)
	ret0, _ := ret[0].(*UserIdleBonus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserIdAndMasterIdleBonusId indicates an expected call of FindByUserIdAndMasterIdleBonusId.
func (mr *MockUserIdleBonusMysqlRepositoryMockRecorder) FindByUserIdAndMasterIdleBonusId(ctx, userId, masterIdleBonusId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserIdAndMasterIdleBonusId", reflect.TypeOf((*MockUserIdleBonusMysqlRepository)(nil).FindByUserIdAndMasterIdleBonusId), ctx, userId, masterIdleBonusId)
}

// FindList mocks base method.
func (m *MockUserIdleBonusMysqlRepository) FindList(ctx context.Context, userId string) (UserIdleBonuses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindList", ctx, userId)
	ret0, _ := ret[0].(UserIdleBonuses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindList indicates an expected call of FindList.
func (mr *MockUserIdleBonusMysqlRepositoryMockRecorder) FindList(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindList", reflect.TypeOf((*MockUserIdleBonusMysqlRepository)(nil).FindList), ctx, userId)
}

// FindListByUserId mocks base method.
func (m *MockUserIdleBonusMysqlRepository) FindListByUserId(ctx context.Context, userId string) (UserIdleBonuses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByUserId", ctx, userId)
	ret0, _ := ret[0].(UserIdleBonuses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByUserId indicates an expected call of FindListByUserId.
func (mr *MockUserIdleBonusMysqlRepositoryMockRecorder) FindListByUserId(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByUserId", reflect.TypeOf((*MockUserIdleBonusMysqlRepository)(nil).FindListByUserId), ctx, userId)
}

// FindListByUserIdAndMasterIdleBonusId mocks base method.
func (m *MockUserIdleBonusMysqlRepository) FindListByUserIdAndMasterIdleBonusId(ctx context.Context, userId string, masterIdleBonusId int64) (UserIdleBonuses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByUserIdAndMasterIdleBonusId", ctx, userId, masterIdleBonusId)
	ret0, _ := ret[0].(UserIdleBonuses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByUserIdAndMasterIdleBonusId indicates an expected call of FindListByUserIdAndMasterIdleBonusId.
func (mr *MockUserIdleBonusMysqlRepositoryMockRecorder) FindListByUserIdAndMasterIdleBonusId(ctx, userId, masterIdleBonusId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByUserIdAndMasterIdleBonusId", reflect.TypeOf((*MockUserIdleBonusMysqlRepository)(nil).FindListByUserIdAndMasterIdleBonusId), ctx, userId, masterIdleBonusId)
}

// FindOrNil mocks base method.
func (m *MockUserIdleBonusMysqlRepository) FindOrNil(ctx context.Context, userId string, masterIdleBonusId int64) (*UserIdleBonus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNil", ctx, userId, masterIdleBonusId)
	ret0, _ := ret[0].(*UserIdleBonus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNil indicates an expected call of FindOrNil.
func (mr *MockUserIdleBonusMysqlRepositoryMockRecorder) FindOrNil(ctx, userId, masterIdleBonusId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNil", reflect.TypeOf((*MockUserIdleBonusMysqlRepository)(nil).FindOrNil), ctx, userId, masterIdleBonusId)
}

// FindOrNilByUserId mocks base method.
func (m *MockUserIdleBonusMysqlRepository) FindOrNilByUserId(ctx context.Context, userId string) (*UserIdleBonus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByUserId", ctx, userId)
	ret0, _ := ret[0].(*UserIdleBonus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByUserId indicates an expected call of FindOrNilByUserId.
func (mr *MockUserIdleBonusMysqlRepositoryMockRecorder) FindOrNilByUserId(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByUserId", reflect.TypeOf((*MockUserIdleBonusMysqlRepository)(nil).FindOrNilByUserId), ctx, userId)
}

// FindOrNilByUserIdAndMasterIdleBonusId mocks base method.
func (m *MockUserIdleBonusMysqlRepository) FindOrNilByUserIdAndMasterIdleBonusId(ctx context.Context, userId string, masterIdleBonusId int64) (*UserIdleBonus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByUserIdAndMasterIdleBonusId", ctx, userId, masterIdleBonusId)
	ret0, _ := ret[0].(*UserIdleBonus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByUserIdAndMasterIdleBonusId indicates an expected call of FindOrNilByUserIdAndMasterIdleBonusId.
func (mr *MockUserIdleBonusMysqlRepositoryMockRecorder) FindOrNilByUserIdAndMasterIdleBonusId(ctx, userId, masterIdleBonusId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByUserIdAndMasterIdleBonusId", reflect.TypeOf((*MockUserIdleBonusMysqlRepository)(nil).FindOrNilByUserIdAndMasterIdleBonusId), ctx, userId, masterIdleBonusId)
}

// Update mocks base method.
func (m_2 *MockUserIdleBonusMysqlRepository) Update(ctx context.Context, tx *gorm.DB, m *UserIdleBonus) (*UserIdleBonus, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, tx, m)
	ret0, _ := ret[0].(*UserIdleBonus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUserIdleBonusMysqlRepositoryMockRecorder) Update(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserIdleBonusMysqlRepository)(nil).Update), ctx, tx, m)
}
