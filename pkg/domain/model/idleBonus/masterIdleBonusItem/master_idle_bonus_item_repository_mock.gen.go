// Code generated by MockGen. DO NOT EDIT.
// Source: ./master_idle_bonus_item_repository.gen.go

// Package masterIdleBonusItem is a generated GoMock package.
package masterIdleBonusItem

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockMasterIdleBonusItemMysqlRepository is a mock of MasterIdleBonusItemMysqlRepository interface.
type MockMasterIdleBonusItemMysqlRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMasterIdleBonusItemMysqlRepositoryMockRecorder
}

// MockMasterIdleBonusItemMysqlRepositoryMockRecorder is the mock recorder for MockMasterIdleBonusItemMysqlRepository.
type MockMasterIdleBonusItemMysqlRepositoryMockRecorder struct {
	mock *MockMasterIdleBonusItemMysqlRepository
}

// NewMockMasterIdleBonusItemMysqlRepository creates a new mock instance.
func NewMockMasterIdleBonusItemMysqlRepository(ctrl *gomock.Controller) *MockMasterIdleBonusItemMysqlRepository {
	mock := &MockMasterIdleBonusItemMysqlRepository{ctrl: ctrl}
	mock.recorder = &MockMasterIdleBonusItemMysqlRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMasterIdleBonusItemMysqlRepository) EXPECT() *MockMasterIdleBonusItemMysqlRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockMasterIdleBonusItemMysqlRepository) Create(ctx context.Context, tx *gorm.DB, m *MasterIdleBonusItem) (*MasterIdleBonusItem, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, tx, m)
	ret0, _ := ret[0].(*MasterIdleBonusItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMasterIdleBonusItemMysqlRepositoryMockRecorder) Create(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMasterIdleBonusItemMysqlRepository)(nil).Create), ctx, tx, m)
}

// CreateList mocks base method.
func (m *MockMasterIdleBonusItemMysqlRepository) CreateList(ctx context.Context, tx *gorm.DB, ms MasterIdleBonusItems) (MasterIdleBonusItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", ctx, tx, ms)
	ret0, _ := ret[0].(MasterIdleBonusItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateList indicates an expected call of CreateList.
func (mr *MockMasterIdleBonusItemMysqlRepositoryMockRecorder) CreateList(ctx, tx, ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockMasterIdleBonusItemMysqlRepository)(nil).CreateList), ctx, tx, ms)
}

// Delete mocks base method.
func (m_2 *MockMasterIdleBonusItemMysqlRepository) Delete(ctx context.Context, tx *gorm.DB, m *MasterIdleBonusItem) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Delete", ctx, tx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMasterIdleBonusItemMysqlRepositoryMockRecorder) Delete(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMasterIdleBonusItemMysqlRepository)(nil).Delete), ctx, tx, m)
}

// Find mocks base method.
func (m *MockMasterIdleBonusItemMysqlRepository) Find(ctx context.Context, id int64) (*MasterIdleBonusItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id)
	ret0, _ := ret[0].(*MasterIdleBonusItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockMasterIdleBonusItemMysqlRepositoryMockRecorder) Find(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMasterIdleBonusItemMysqlRepository)(nil).Find), ctx, id)
}

// FindByMasterIdleBonusScheduleId mocks base method.
func (m *MockMasterIdleBonusItemMysqlRepository) FindByMasterIdleBonusScheduleId(ctx context.Context, masterIdleBonusScheduleId int64) (*MasterIdleBonusItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByMasterIdleBonusScheduleId", ctx, masterIdleBonusScheduleId)
	ret0, _ := ret[0].(*MasterIdleBonusItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByMasterIdleBonusScheduleId indicates an expected call of FindByMasterIdleBonusScheduleId.
func (mr *MockMasterIdleBonusItemMysqlRepositoryMockRecorder) FindByMasterIdleBonusScheduleId(ctx, masterIdleBonusScheduleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByMasterIdleBonusScheduleId", reflect.TypeOf((*MockMasterIdleBonusItemMysqlRepository)(nil).FindByMasterIdleBonusScheduleId), ctx, masterIdleBonusScheduleId)
}

// FindByMasterIdleBonusScheduleIdAndMasterItemId mocks base method.
func (m *MockMasterIdleBonusItemMysqlRepository) FindByMasterIdleBonusScheduleIdAndMasterItemId(ctx context.Context, masterIdleBonusScheduleId, masterItemId int64) (*MasterIdleBonusItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByMasterIdleBonusScheduleIdAndMasterItemId", ctx, masterIdleBonusScheduleId, masterItemId)
	ret0, _ := ret[0].(*MasterIdleBonusItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByMasterIdleBonusScheduleIdAndMasterItemId indicates an expected call of FindByMasterIdleBonusScheduleIdAndMasterItemId.
func (mr *MockMasterIdleBonusItemMysqlRepositoryMockRecorder) FindByMasterIdleBonusScheduleIdAndMasterItemId(ctx, masterIdleBonusScheduleId, masterItemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByMasterIdleBonusScheduleIdAndMasterItemId", reflect.TypeOf((*MockMasterIdleBonusItemMysqlRepository)(nil).FindByMasterIdleBonusScheduleIdAndMasterItemId), ctx, masterIdleBonusScheduleId, masterItemId)
}

// FindByMasterItemId mocks base method.
func (m *MockMasterIdleBonusItemMysqlRepository) FindByMasterItemId(ctx context.Context, masterItemId int64) (*MasterIdleBonusItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByMasterItemId", ctx, masterItemId)
	ret0, _ := ret[0].(*MasterIdleBonusItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByMasterItemId indicates an expected call of FindByMasterItemId.
func (mr *MockMasterIdleBonusItemMysqlRepositoryMockRecorder) FindByMasterItemId(ctx, masterItemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByMasterItemId", reflect.TypeOf((*MockMasterIdleBonusItemMysqlRepository)(nil).FindByMasterItemId), ctx, masterItemId)
}

// FindList mocks base method.
func (m *MockMasterIdleBonusItemMysqlRepository) FindList(ctx context.Context) (MasterIdleBonusItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindList", ctx)
	ret0, _ := ret[0].(MasterIdleBonusItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindList indicates an expected call of FindList.
func (mr *MockMasterIdleBonusItemMysqlRepositoryMockRecorder) FindList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindList", reflect.TypeOf((*MockMasterIdleBonusItemMysqlRepository)(nil).FindList), ctx)
}

// FindListByMasterIdleBonusScheduleId mocks base method.
func (m *MockMasterIdleBonusItemMysqlRepository) FindListByMasterIdleBonusScheduleId(ctx context.Context, masterIdleBonusScheduleId int64) (MasterIdleBonusItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByMasterIdleBonusScheduleId", ctx, masterIdleBonusScheduleId)
	ret0, _ := ret[0].(MasterIdleBonusItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByMasterIdleBonusScheduleId indicates an expected call of FindListByMasterIdleBonusScheduleId.
func (mr *MockMasterIdleBonusItemMysqlRepositoryMockRecorder) FindListByMasterIdleBonusScheduleId(ctx, masterIdleBonusScheduleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByMasterIdleBonusScheduleId", reflect.TypeOf((*MockMasterIdleBonusItemMysqlRepository)(nil).FindListByMasterIdleBonusScheduleId), ctx, masterIdleBonusScheduleId)
}

// FindListByMasterIdleBonusScheduleIdAndMasterItemId mocks base method.
func (m *MockMasterIdleBonusItemMysqlRepository) FindListByMasterIdleBonusScheduleIdAndMasterItemId(ctx context.Context, masterIdleBonusScheduleId, masterItemId int64) (MasterIdleBonusItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByMasterIdleBonusScheduleIdAndMasterItemId", ctx, masterIdleBonusScheduleId, masterItemId)
	ret0, _ := ret[0].(MasterIdleBonusItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByMasterIdleBonusScheduleIdAndMasterItemId indicates an expected call of FindListByMasterIdleBonusScheduleIdAndMasterItemId.
func (mr *MockMasterIdleBonusItemMysqlRepositoryMockRecorder) FindListByMasterIdleBonusScheduleIdAndMasterItemId(ctx, masterIdleBonusScheduleId, masterItemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByMasterIdleBonusScheduleIdAndMasterItemId", reflect.TypeOf((*MockMasterIdleBonusItemMysqlRepository)(nil).FindListByMasterIdleBonusScheduleIdAndMasterItemId), ctx, masterIdleBonusScheduleId, masterItemId)
}

// FindListByMasterItemId mocks base method.
func (m *MockMasterIdleBonusItemMysqlRepository) FindListByMasterItemId(ctx context.Context, masterItemId int64) (MasterIdleBonusItems, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByMasterItemId", ctx, masterItemId)
	ret0, _ := ret[0].(MasterIdleBonusItems)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByMasterItemId indicates an expected call of FindListByMasterItemId.
func (mr *MockMasterIdleBonusItemMysqlRepositoryMockRecorder) FindListByMasterItemId(ctx, masterItemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByMasterItemId", reflect.TypeOf((*MockMasterIdleBonusItemMysqlRepository)(nil).FindListByMasterItemId), ctx, masterItemId)
}

// FindOrNil mocks base method.
func (m *MockMasterIdleBonusItemMysqlRepository) FindOrNil(ctx context.Context, id int64) (*MasterIdleBonusItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNil", ctx, id)
	ret0, _ := ret[0].(*MasterIdleBonusItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNil indicates an expected call of FindOrNil.
func (mr *MockMasterIdleBonusItemMysqlRepositoryMockRecorder) FindOrNil(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNil", reflect.TypeOf((*MockMasterIdleBonusItemMysqlRepository)(nil).FindOrNil), ctx, id)
}

// FindOrNilByMasterIdleBonusScheduleId mocks base method.
func (m *MockMasterIdleBonusItemMysqlRepository) FindOrNilByMasterIdleBonusScheduleId(ctx context.Context, masterIdleBonusScheduleId int64) (*MasterIdleBonusItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByMasterIdleBonusScheduleId", ctx, masterIdleBonusScheduleId)
	ret0, _ := ret[0].(*MasterIdleBonusItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByMasterIdleBonusScheduleId indicates an expected call of FindOrNilByMasterIdleBonusScheduleId.
func (mr *MockMasterIdleBonusItemMysqlRepositoryMockRecorder) FindOrNilByMasterIdleBonusScheduleId(ctx, masterIdleBonusScheduleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByMasterIdleBonusScheduleId", reflect.TypeOf((*MockMasterIdleBonusItemMysqlRepository)(nil).FindOrNilByMasterIdleBonusScheduleId), ctx, masterIdleBonusScheduleId)
}

// FindOrNilByMasterIdleBonusScheduleIdAndMasterItemId mocks base method.
func (m *MockMasterIdleBonusItemMysqlRepository) FindOrNilByMasterIdleBonusScheduleIdAndMasterItemId(ctx context.Context, masterIdleBonusScheduleId, masterItemId int64) (*MasterIdleBonusItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByMasterIdleBonusScheduleIdAndMasterItemId", ctx, masterIdleBonusScheduleId, masterItemId)
	ret0, _ := ret[0].(*MasterIdleBonusItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByMasterIdleBonusScheduleIdAndMasterItemId indicates an expected call of FindOrNilByMasterIdleBonusScheduleIdAndMasterItemId.
func (mr *MockMasterIdleBonusItemMysqlRepositoryMockRecorder) FindOrNilByMasterIdleBonusScheduleIdAndMasterItemId(ctx, masterIdleBonusScheduleId, masterItemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByMasterIdleBonusScheduleIdAndMasterItemId", reflect.TypeOf((*MockMasterIdleBonusItemMysqlRepository)(nil).FindOrNilByMasterIdleBonusScheduleIdAndMasterItemId), ctx, masterIdleBonusScheduleId, masterItemId)
}

// FindOrNilByMasterItemId mocks base method.
func (m *MockMasterIdleBonusItemMysqlRepository) FindOrNilByMasterItemId(ctx context.Context, masterItemId int64) (*MasterIdleBonusItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByMasterItemId", ctx, masterItemId)
	ret0, _ := ret[0].(*MasterIdleBonusItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByMasterItemId indicates an expected call of FindOrNilByMasterItemId.
func (mr *MockMasterIdleBonusItemMysqlRepositoryMockRecorder) FindOrNilByMasterItemId(ctx, masterItemId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByMasterItemId", reflect.TypeOf((*MockMasterIdleBonusItemMysqlRepository)(nil).FindOrNilByMasterItemId), ctx, masterItemId)
}

// Update mocks base method.
func (m_2 *MockMasterIdleBonusItemMysqlRepository) Update(ctx context.Context, tx *gorm.DB, m *MasterIdleBonusItem) (*MasterIdleBonusItem, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, tx, m)
	ret0, _ := ret[0].(*MasterIdleBonusItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMasterIdleBonusItemMysqlRepositoryMockRecorder) Update(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMasterIdleBonusItemMysqlRepository)(nil).Update), ctx, tx, m)
}
