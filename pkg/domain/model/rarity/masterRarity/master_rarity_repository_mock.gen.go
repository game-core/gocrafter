// Code generated by MockGen. DO NOT EDIT.
// Source: ./master_rarity_repository.gen.go

// Package masterRarity is a generated GoMock package.
package masterRarity

import (
	context "context"
	reflect "reflect"

	enum "github.com/game-core/gocrafter/pkg/domain/enum"
	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockMasterRarityMysqlRepository is a mock of MasterRarityMysqlRepository interface.
type MockMasterRarityMysqlRepository struct {
	ctrl     *gomock.Controller
	recorder *MockMasterRarityMysqlRepositoryMockRecorder
}

// MockMasterRarityMysqlRepositoryMockRecorder is the mock recorder for MockMasterRarityMysqlRepository.
type MockMasterRarityMysqlRepositoryMockRecorder struct {
	mock *MockMasterRarityMysqlRepository
}

// NewMockMasterRarityMysqlRepository creates a new mock instance.
func NewMockMasterRarityMysqlRepository(ctrl *gomock.Controller) *MockMasterRarityMysqlRepository {
	mock := &MockMasterRarityMysqlRepository{ctrl: ctrl}
	mock.recorder = &MockMasterRarityMysqlRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMasterRarityMysqlRepository) EXPECT() *MockMasterRarityMysqlRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockMasterRarityMysqlRepository) Create(ctx context.Context, tx *gorm.DB, m *MasterRarity) (*MasterRarity, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, tx, m)
	ret0, _ := ret[0].(*MasterRarity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockMasterRarityMysqlRepositoryMockRecorder) Create(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockMasterRarityMysqlRepository)(nil).Create), ctx, tx, m)
}

// CreateList mocks base method.
func (m *MockMasterRarityMysqlRepository) CreateList(ctx context.Context, tx *gorm.DB, ms MasterRarities) (MasterRarities, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", ctx, tx, ms)
	ret0, _ := ret[0].(MasterRarities)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateList indicates an expected call of CreateList.
func (mr *MockMasterRarityMysqlRepositoryMockRecorder) CreateList(ctx, tx, ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockMasterRarityMysqlRepository)(nil).CreateList), ctx, tx, ms)
}

// Delete mocks base method.
func (m_2 *MockMasterRarityMysqlRepository) Delete(ctx context.Context, tx *gorm.DB, m *MasterRarity) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Delete", ctx, tx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockMasterRarityMysqlRepositoryMockRecorder) Delete(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMasterRarityMysqlRepository)(nil).Delete), ctx, tx, m)
}

// Find mocks base method.
func (m *MockMasterRarityMysqlRepository) Find(ctx context.Context, id int64) (*MasterRarity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id)
	ret0, _ := ret[0].(*MasterRarity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockMasterRarityMysqlRepositoryMockRecorder) Find(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockMasterRarityMysqlRepository)(nil).Find), ctx, id)
}

// FindByRarityType mocks base method.
func (m *MockMasterRarityMysqlRepository) FindByRarityType(ctx context.Context, rarityType enum.RarityType) (*MasterRarity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByRarityType", ctx, rarityType)
	ret0, _ := ret[0].(*MasterRarity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByRarityType indicates an expected call of FindByRarityType.
func (mr *MockMasterRarityMysqlRepositoryMockRecorder) FindByRarityType(ctx, rarityType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByRarityType", reflect.TypeOf((*MockMasterRarityMysqlRepository)(nil).FindByRarityType), ctx, rarityType)
}

// FindList mocks base method.
func (m *MockMasterRarityMysqlRepository) FindList(ctx context.Context) (MasterRarities, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindList", ctx)
	ret0, _ := ret[0].(MasterRarities)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindList indicates an expected call of FindList.
func (mr *MockMasterRarityMysqlRepositoryMockRecorder) FindList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindList", reflect.TypeOf((*MockMasterRarityMysqlRepository)(nil).FindList), ctx)
}

// FindListByRarityType mocks base method.
func (m *MockMasterRarityMysqlRepository) FindListByRarityType(ctx context.Context, rarityType enum.RarityType) (MasterRarities, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByRarityType", ctx, rarityType)
	ret0, _ := ret[0].(MasterRarities)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByRarityType indicates an expected call of FindListByRarityType.
func (mr *MockMasterRarityMysqlRepositoryMockRecorder) FindListByRarityType(ctx, rarityType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByRarityType", reflect.TypeOf((*MockMasterRarityMysqlRepository)(nil).FindListByRarityType), ctx, rarityType)
}

// FindOrNil mocks base method.
func (m *MockMasterRarityMysqlRepository) FindOrNil(ctx context.Context, id int64) (*MasterRarity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNil", ctx, id)
	ret0, _ := ret[0].(*MasterRarity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNil indicates an expected call of FindOrNil.
func (mr *MockMasterRarityMysqlRepositoryMockRecorder) FindOrNil(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNil", reflect.TypeOf((*MockMasterRarityMysqlRepository)(nil).FindOrNil), ctx, id)
}

// FindOrNilByRarityType mocks base method.
func (m *MockMasterRarityMysqlRepository) FindOrNilByRarityType(ctx context.Context, rarityType enum.RarityType) (*MasterRarity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByRarityType", ctx, rarityType)
	ret0, _ := ret[0].(*MasterRarity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByRarityType indicates an expected call of FindOrNilByRarityType.
func (mr *MockMasterRarityMysqlRepositoryMockRecorder) FindOrNilByRarityType(ctx, rarityType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByRarityType", reflect.TypeOf((*MockMasterRarityMysqlRepository)(nil).FindOrNilByRarityType), ctx, rarityType)
}

// Update mocks base method.
func (m_2 *MockMasterRarityMysqlRepository) Update(ctx context.Context, tx *gorm.DB, m *MasterRarity) (*MasterRarity, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, tx, m)
	ret0, _ := ret[0].(*MasterRarity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMasterRarityMysqlRepositoryMockRecorder) Update(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMasterRarityMysqlRepository)(nil).Update), ctx, tx, m)
}
