// Code generated by MockGen. DO NOT EDIT.
// Source: ./common_room_user_mysql_repository.gen.go

// Package commonRoomUser is a generated GoMock package.
package commonRoomUser

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockCommonRoomUserMysqlRepository is a mock of CommonRoomUserMysqlRepository interface.
type MockCommonRoomUserMysqlRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCommonRoomUserMysqlRepositoryMockRecorder
}

// MockCommonRoomUserMysqlRepositoryMockRecorder is the mock recorder for MockCommonRoomUserMysqlRepository.
type MockCommonRoomUserMysqlRepositoryMockRecorder struct {
	mock *MockCommonRoomUserMysqlRepository
}

// NewMockCommonRoomUserMysqlRepository creates a new mock instance.
func NewMockCommonRoomUserMysqlRepository(ctrl *gomock.Controller) *MockCommonRoomUserMysqlRepository {
	mock := &MockCommonRoomUserMysqlRepository{ctrl: ctrl}
	mock.recorder = &MockCommonRoomUserMysqlRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommonRoomUserMysqlRepository) EXPECT() *MockCommonRoomUserMysqlRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockCommonRoomUserMysqlRepository) Create(ctx context.Context, tx *gorm.DB, m *CommonRoomUser) (*CommonRoomUser, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, tx, m)
	ret0, _ := ret[0].(*CommonRoomUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCommonRoomUserMysqlRepositoryMockRecorder) Create(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCommonRoomUserMysqlRepository)(nil).Create), ctx, tx, m)
}

// CreateList mocks base method.
func (m *MockCommonRoomUserMysqlRepository) CreateList(ctx context.Context, tx *gorm.DB, ms CommonRoomUsers) (CommonRoomUsers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", ctx, tx, ms)
	ret0, _ := ret[0].(CommonRoomUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateList indicates an expected call of CreateList.
func (mr *MockCommonRoomUserMysqlRepositoryMockRecorder) CreateList(ctx, tx, ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockCommonRoomUserMysqlRepository)(nil).CreateList), ctx, tx, ms)
}

// Delete mocks base method.
func (m_2 *MockCommonRoomUserMysqlRepository) Delete(ctx context.Context, tx *gorm.DB, m *CommonRoomUser) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Delete", ctx, tx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCommonRoomUserMysqlRepositoryMockRecorder) Delete(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCommonRoomUserMysqlRepository)(nil).Delete), ctx, tx, m)
}

// Find mocks base method.
func (m *MockCommonRoomUserMysqlRepository) Find(ctx context.Context, roomId, userId string) (*CommonRoomUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, roomId, userId)
	ret0, _ := ret[0].(*CommonRoomUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockCommonRoomUserMysqlRepositoryMockRecorder) Find(ctx, roomId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCommonRoomUserMysqlRepository)(nil).Find), ctx, roomId, userId)
}

// FindByRoomId mocks base method.
func (m *MockCommonRoomUserMysqlRepository) FindByRoomId(ctx context.Context, roomId string) (*CommonRoomUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByRoomId", ctx, roomId)
	ret0, _ := ret[0].(*CommonRoomUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByRoomId indicates an expected call of FindByRoomId.
func (mr *MockCommonRoomUserMysqlRepositoryMockRecorder) FindByRoomId(ctx, roomId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByRoomId", reflect.TypeOf((*MockCommonRoomUserMysqlRepository)(nil).FindByRoomId), ctx, roomId)
}

// FindList mocks base method.
func (m *MockCommonRoomUserMysqlRepository) FindList(ctx context.Context) (CommonRoomUsers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindList", ctx)
	ret0, _ := ret[0].(CommonRoomUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindList indicates an expected call of FindList.
func (mr *MockCommonRoomUserMysqlRepositoryMockRecorder) FindList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindList", reflect.TypeOf((*MockCommonRoomUserMysqlRepository)(nil).FindList), ctx)
}

// FindListByRoomId mocks base method.
func (m *MockCommonRoomUserMysqlRepository) FindListByRoomId(ctx context.Context, roomId string) (CommonRoomUsers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByRoomId", ctx, roomId)
	ret0, _ := ret[0].(CommonRoomUsers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByRoomId indicates an expected call of FindListByRoomId.
func (mr *MockCommonRoomUserMysqlRepositoryMockRecorder) FindListByRoomId(ctx, roomId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByRoomId", reflect.TypeOf((*MockCommonRoomUserMysqlRepository)(nil).FindListByRoomId), ctx, roomId)
}

// FindOrNil mocks base method.
func (m *MockCommonRoomUserMysqlRepository) FindOrNil(ctx context.Context, roomId, userId string) (*CommonRoomUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNil", ctx, roomId, userId)
	ret0, _ := ret[0].(*CommonRoomUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNil indicates an expected call of FindOrNil.
func (mr *MockCommonRoomUserMysqlRepositoryMockRecorder) FindOrNil(ctx, roomId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNil", reflect.TypeOf((*MockCommonRoomUserMysqlRepository)(nil).FindOrNil), ctx, roomId, userId)
}

// FindOrNilByRoomId mocks base method.
func (m *MockCommonRoomUserMysqlRepository) FindOrNilByRoomId(ctx context.Context, roomId string) (*CommonRoomUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByRoomId", ctx, roomId)
	ret0, _ := ret[0].(*CommonRoomUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByRoomId indicates an expected call of FindOrNilByRoomId.
func (mr *MockCommonRoomUserMysqlRepositoryMockRecorder) FindOrNilByRoomId(ctx, roomId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByRoomId", reflect.TypeOf((*MockCommonRoomUserMysqlRepository)(nil).FindOrNilByRoomId), ctx, roomId)
}

// Update mocks base method.
func (m_2 *MockCommonRoomUserMysqlRepository) Update(ctx context.Context, tx *gorm.DB, m *CommonRoomUser) (*CommonRoomUser, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, tx, m)
	ret0, _ := ret[0].(*CommonRoomUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCommonRoomUserMysqlRepositoryMockRecorder) Update(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCommonRoomUserMysqlRepository)(nil).Update), ctx, tx, m)
}
