// Code generated by MockGen. DO NOT EDIT.
// Source: ./common_room_mysql_repository.gen.go

// Package commonRoom is a generated GoMock package.
package commonRoom

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockCommonRoomMysqlRepository is a mock of CommonRoomMysqlRepository interface.
type MockCommonRoomMysqlRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCommonRoomMysqlRepositoryMockRecorder
}

// MockCommonRoomMysqlRepositoryMockRecorder is the mock recorder for MockCommonRoomMysqlRepository.
type MockCommonRoomMysqlRepositoryMockRecorder struct {
	mock *MockCommonRoomMysqlRepository
}

// NewMockCommonRoomMysqlRepository creates a new mock instance.
func NewMockCommonRoomMysqlRepository(ctrl *gomock.Controller) *MockCommonRoomMysqlRepository {
	mock := &MockCommonRoomMysqlRepository{ctrl: ctrl}
	mock.recorder = &MockCommonRoomMysqlRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommonRoomMysqlRepository) EXPECT() *MockCommonRoomMysqlRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockCommonRoomMysqlRepository) Create(ctx context.Context, tx *gorm.DB, m *CommonRoom) (*CommonRoom, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, tx, m)
	ret0, _ := ret[0].(*CommonRoom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCommonRoomMysqlRepositoryMockRecorder) Create(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCommonRoomMysqlRepository)(nil).Create), ctx, tx, m)
}

// CreateList mocks base method.
func (m *MockCommonRoomMysqlRepository) CreateList(ctx context.Context, tx *gorm.DB, ms CommonRooms) (CommonRooms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateList", ctx, tx, ms)
	ret0, _ := ret[0].(CommonRooms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateList indicates an expected call of CreateList.
func (mr *MockCommonRoomMysqlRepositoryMockRecorder) CreateList(ctx, tx, ms interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateList", reflect.TypeOf((*MockCommonRoomMysqlRepository)(nil).CreateList), ctx, tx, ms)
}

// Delete mocks base method.
func (m_2 *MockCommonRoomMysqlRepository) Delete(ctx context.Context, tx *gorm.DB, m *CommonRoom) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Delete", ctx, tx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCommonRoomMysqlRepositoryMockRecorder) Delete(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCommonRoomMysqlRepository)(nil).Delete), ctx, tx, m)
}

// Find mocks base method.
func (m *MockCommonRoomMysqlRepository) Find(ctx context.Context, roomId string) (*CommonRoom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, roomId)
	ret0, _ := ret[0].(*CommonRoom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockCommonRoomMysqlRepositoryMockRecorder) Find(ctx, roomId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCommonRoomMysqlRepository)(nil).Find), ctx, roomId)
}

// FindByHostUserId mocks base method.
func (m *MockCommonRoomMysqlRepository) FindByHostUserId(ctx context.Context, hostUserId string) (*CommonRoom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHostUserId", ctx, hostUserId)
	ret0, _ := ret[0].(*CommonRoom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHostUserId indicates an expected call of FindByHostUserId.
func (mr *MockCommonRoomMysqlRepositoryMockRecorder) FindByHostUserId(ctx, hostUserId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHostUserId", reflect.TypeOf((*MockCommonRoomMysqlRepository)(nil).FindByHostUserId), ctx, hostUserId)
}

// FindByName mocks base method.
func (m *MockCommonRoomMysqlRepository) FindByName(ctx context.Context, name string) (*CommonRoom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", ctx, name)
	ret0, _ := ret[0].(*CommonRoom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockCommonRoomMysqlRepositoryMockRecorder) FindByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockCommonRoomMysqlRepository)(nil).FindByName), ctx, name)
}

// FindByRoomIdAndHostUserId mocks base method.
func (m *MockCommonRoomMysqlRepository) FindByRoomIdAndHostUserId(ctx context.Context, roomId, hostUserId string) (*CommonRoom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByRoomIdAndHostUserId", ctx, roomId, hostUserId)
	ret0, _ := ret[0].(*CommonRoom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByRoomIdAndHostUserId indicates an expected call of FindByRoomIdAndHostUserId.
func (mr *MockCommonRoomMysqlRepositoryMockRecorder) FindByRoomIdAndHostUserId(ctx, roomId, hostUserId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByRoomIdAndHostUserId", reflect.TypeOf((*MockCommonRoomMysqlRepository)(nil).FindByRoomIdAndHostUserId), ctx, roomId, hostUserId)
}

// FindList mocks base method.
func (m *MockCommonRoomMysqlRepository) FindList(ctx context.Context) (CommonRooms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindList", ctx)
	ret0, _ := ret[0].(CommonRooms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindList indicates an expected call of FindList.
func (mr *MockCommonRoomMysqlRepositoryMockRecorder) FindList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindList", reflect.TypeOf((*MockCommonRoomMysqlRepository)(nil).FindList), ctx)
}

// FindListByHostUserId mocks base method.
func (m *MockCommonRoomMysqlRepository) FindListByHostUserId(ctx context.Context, hostUserId string) (CommonRooms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByHostUserId", ctx, hostUserId)
	ret0, _ := ret[0].(CommonRooms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByHostUserId indicates an expected call of FindListByHostUserId.
func (mr *MockCommonRoomMysqlRepositoryMockRecorder) FindListByHostUserId(ctx, hostUserId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByHostUserId", reflect.TypeOf((*MockCommonRoomMysqlRepository)(nil).FindListByHostUserId), ctx, hostUserId)
}

// FindListByName mocks base method.
func (m *MockCommonRoomMysqlRepository) FindListByName(ctx context.Context, name string) (CommonRooms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByName", ctx, name)
	ret0, _ := ret[0].(CommonRooms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByName indicates an expected call of FindListByName.
func (mr *MockCommonRoomMysqlRepositoryMockRecorder) FindListByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByName", reflect.TypeOf((*MockCommonRoomMysqlRepository)(nil).FindListByName), ctx, name)
}

// FindListByRoomIdAndHostUserId mocks base method.
func (m *MockCommonRoomMysqlRepository) FindListByRoomIdAndHostUserId(ctx context.Context, roomId, hostUserId string) (CommonRooms, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindListByRoomIdAndHostUserId", ctx, roomId, hostUserId)
	ret0, _ := ret[0].(CommonRooms)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindListByRoomIdAndHostUserId indicates an expected call of FindListByRoomIdAndHostUserId.
func (mr *MockCommonRoomMysqlRepositoryMockRecorder) FindListByRoomIdAndHostUserId(ctx, roomId, hostUserId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindListByRoomIdAndHostUserId", reflect.TypeOf((*MockCommonRoomMysqlRepository)(nil).FindListByRoomIdAndHostUserId), ctx, roomId, hostUserId)
}

// FindOrNil mocks base method.
func (m *MockCommonRoomMysqlRepository) FindOrNil(ctx context.Context, roomId string) (*CommonRoom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNil", ctx, roomId)
	ret0, _ := ret[0].(*CommonRoom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNil indicates an expected call of FindOrNil.
func (mr *MockCommonRoomMysqlRepositoryMockRecorder) FindOrNil(ctx, roomId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNil", reflect.TypeOf((*MockCommonRoomMysqlRepository)(nil).FindOrNil), ctx, roomId)
}

// FindOrNilByHostUserId mocks base method.
func (m *MockCommonRoomMysqlRepository) FindOrNilByHostUserId(ctx context.Context, hostUserId string) (*CommonRoom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByHostUserId", ctx, hostUserId)
	ret0, _ := ret[0].(*CommonRoom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByHostUserId indicates an expected call of FindOrNilByHostUserId.
func (mr *MockCommonRoomMysqlRepositoryMockRecorder) FindOrNilByHostUserId(ctx, hostUserId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByHostUserId", reflect.TypeOf((*MockCommonRoomMysqlRepository)(nil).FindOrNilByHostUserId), ctx, hostUserId)
}

// FindOrNilByName mocks base method.
func (m *MockCommonRoomMysqlRepository) FindOrNilByName(ctx context.Context, name string) (*CommonRoom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByName", ctx, name)
	ret0, _ := ret[0].(*CommonRoom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByName indicates an expected call of FindOrNilByName.
func (mr *MockCommonRoomMysqlRepositoryMockRecorder) FindOrNilByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByName", reflect.TypeOf((*MockCommonRoomMysqlRepository)(nil).FindOrNilByName), ctx, name)
}

// FindOrNilByRoomIdAndHostUserId mocks base method.
func (m *MockCommonRoomMysqlRepository) FindOrNilByRoomIdAndHostUserId(ctx context.Context, roomId, hostUserId string) (*CommonRoom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByRoomIdAndHostUserId", ctx, roomId, hostUserId)
	ret0, _ := ret[0].(*CommonRoom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByRoomIdAndHostUserId indicates an expected call of FindOrNilByRoomIdAndHostUserId.
func (mr *MockCommonRoomMysqlRepositoryMockRecorder) FindOrNilByRoomIdAndHostUserId(ctx, roomId, hostUserId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByRoomIdAndHostUserId", reflect.TypeOf((*MockCommonRoomMysqlRepository)(nil).FindOrNilByRoomIdAndHostUserId), ctx, roomId, hostUserId)
}

// Update mocks base method.
func (m_2 *MockCommonRoomMysqlRepository) Update(ctx context.Context, tx *gorm.DB, m *CommonRoom) (*CommonRoom, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, tx, m)
	ret0, _ := ret[0].(*CommonRoom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCommonRoomMysqlRepositoryMockRecorder) Update(ctx, tx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCommonRoomMysqlRepository)(nil).Update), ctx, tx, m)
}
