// Code generated by MockGen. DO NOT EDIT.
// Source: ./example_repository.gen.go

// Package example is a generated GoMock package.
package example

import (
	reflect "reflect"

	example "github.com/game-core/gocrafter/domain/entity/master/example"
	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
)

// MockExampleRepository is a mock of ExampleRepository interface.
type MockExampleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockExampleRepositoryMockRecorder
}

// MockExampleRepositoryMockRecorder is the mock recorder for MockExampleRepository.
type MockExampleRepositoryMockRecorder struct {
	mock *MockExampleRepository
}

// NewMockExampleRepository creates a new mock instance.
func NewMockExampleRepository(ctrl *gomock.Controller) *MockExampleRepository {
	mock := &MockExampleRepository{ctrl: ctrl}
	mock.recorder = &MockExampleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExampleRepository) EXPECT() *MockExampleRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockExampleRepository) Create(entity *example.Example, tx *gorm.DB) (*example.Example, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", entity, tx)
	ret0, _ := ret[0].(*example.Example)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockExampleRepositoryMockRecorder) Create(entity, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockExampleRepository)(nil).Create), entity, tx)
}

// Delete mocks base method.
func (m *MockExampleRepository) Delete(entity *example.Example, tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", entity, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockExampleRepositoryMockRecorder) Delete(entity, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockExampleRepository)(nil).Delete), entity, tx)
}

// FindByID mocks base method.
func (m *MockExampleRepository) FindByID(ID int64) (*example.Example, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ID)
	ret0, _ := ret[0].(*example.Example)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockExampleRepositoryMockRecorder) FindByID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockExampleRepository)(nil).FindByID), ID)
}

// FindByIDAndName mocks base method.
func (m *MockExampleRepository) FindByIDAndName(ID int64, Name string) (*example.Example, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIDAndName", ID, Name)
	ret0, _ := ret[0].(*example.Example)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIDAndName indicates an expected call of FindByIDAndName.
func (mr *MockExampleRepositoryMockRecorder) FindByIDAndName(ID, Name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIDAndName", reflect.TypeOf((*MockExampleRepository)(nil).FindByIDAndName), ID, Name)
}

// FindByName mocks base method.
func (m *MockExampleRepository) FindByName(Name string) (*example.Example, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", Name)
	ret0, _ := ret[0].(*example.Example)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockExampleRepositoryMockRecorder) FindByName(Name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockExampleRepository)(nil).FindByName), Name)
}

// FindOrNilByID mocks base method.
func (m *MockExampleRepository) FindOrNilByID(ID int64) (*example.Example, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByID", ID)
	ret0, _ := ret[0].(*example.Example)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByID indicates an expected call of FindOrNilByID.
func (mr *MockExampleRepositoryMockRecorder) FindOrNilByID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByID", reflect.TypeOf((*MockExampleRepository)(nil).FindOrNilByID), ID)
}

// FindOrNilByIDAndName mocks base method.
func (m *MockExampleRepository) FindOrNilByIDAndName(ID int64, Name string) (*example.Example, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByIDAndName", ID, Name)
	ret0, _ := ret[0].(*example.Example)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByIDAndName indicates an expected call of FindOrNilByIDAndName.
func (mr *MockExampleRepositoryMockRecorder) FindOrNilByIDAndName(ID, Name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByIDAndName", reflect.TypeOf((*MockExampleRepository)(nil).FindOrNilByIDAndName), ID, Name)
}

// FindOrNilByName mocks base method.
func (m *MockExampleRepository) FindOrNilByName(Name string) (*example.Example, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByName", Name)
	ret0, _ := ret[0].(*example.Example)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByName indicates an expected call of FindOrNilByName.
func (mr *MockExampleRepositoryMockRecorder) FindOrNilByName(Name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByName", reflect.TypeOf((*MockExampleRepository)(nil).FindOrNilByName), Name)
}

// List mocks base method.
func (m *MockExampleRepository) List(limit int64) (*example.Examples, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", limit)
	ret0, _ := ret[0].(*example.Examples)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockExampleRepositoryMockRecorder) List(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockExampleRepository)(nil).List), limit)
}

// ListByIDAndName mocks base method.
func (m *MockExampleRepository) ListByIDAndName(ID int64, Name string) (*example.Examples, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByIDAndName", ID, Name)
	ret0, _ := ret[0].(*example.Examples)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByIDAndName indicates an expected call of ListByIDAndName.
func (mr *MockExampleRepositoryMockRecorder) ListByIDAndName(ID, Name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByIDAndName", reflect.TypeOf((*MockExampleRepository)(nil).ListByIDAndName), ID, Name)
}

// ListByName mocks base method.
func (m *MockExampleRepository) ListByName(Name string) (*example.Examples, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByName", Name)
	ret0, _ := ret[0].(*example.Examples)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByName indicates an expected call of ListByName.
func (mr *MockExampleRepositoryMockRecorder) ListByName(Name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByName", reflect.TypeOf((*MockExampleRepository)(nil).ListByName), Name)
}

// Update mocks base method.
func (m *MockExampleRepository) Update(entity *example.Example, tx *gorm.DB) (*example.Example, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", entity, tx)
	ret0, _ := ret[0].(*example.Example)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockExampleRepositoryMockRecorder) Update(entity, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockExampleRepository)(nil).Update), entity, tx)
}
