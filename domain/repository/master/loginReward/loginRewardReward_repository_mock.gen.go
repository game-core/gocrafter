// Code generated by MockGen. DO NOT EDIT.
// Source: ./loginRewardReward_repository.gen.go

// Package loginReward is a generated GoMock package.
package loginReward

import (
	reflect "reflect"

	loginReward "github.com/game-core/gocrafter/domain/entity/master/loginReward"
	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockLoginRewardRewardRepository is a mock of LoginRewardRewardRepository interface.
type MockLoginRewardRewardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLoginRewardRewardRepositoryMockRecorder
}

// MockLoginRewardRewardRepositoryMockRecorder is the mock recorder for MockLoginRewardRewardRepository.
type MockLoginRewardRewardRepositoryMockRecorder struct {
	mock *MockLoginRewardRewardRepository
}

// NewMockLoginRewardRewardRepository creates a new mock instance.
func NewMockLoginRewardRewardRepository(ctrl *gomock.Controller) *MockLoginRewardRewardRepository {
	mock := &MockLoginRewardRewardRepository{ctrl: ctrl}
	mock.recorder = &MockLoginRewardRewardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginRewardRewardRepository) EXPECT() *MockLoginRewardRewardRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLoginRewardRewardRepository) Create(entity *loginReward.LoginRewardReward, tx *gorm.DB) (*loginReward.LoginRewardReward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", entity, tx)
	ret0, _ := ret[0].(*loginReward.LoginRewardReward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockLoginRewardRewardRepositoryMockRecorder) Create(entity, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLoginRewardRewardRepository)(nil).Create), entity, tx)
}

// Delete mocks base method.
func (m *MockLoginRewardRewardRepository) Delete(entity *loginReward.LoginRewardReward, tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", entity, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockLoginRewardRewardRepositoryMockRecorder) Delete(entity, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLoginRewardRewardRepository)(nil).Delete), entity, tx)
}

// FindByID mocks base method.
func (m *MockLoginRewardRewardRepository) FindByID(ID int64) (*loginReward.LoginRewardReward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ID)
	ret0, _ := ret[0].(*loginReward.LoginRewardReward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockLoginRewardRewardRepositoryMockRecorder) FindByID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockLoginRewardRewardRepository)(nil).FindByID), ID)
}

// FindByLoginRewardModelName mocks base method.
func (m *MockLoginRewardRewardRepository) FindByLoginRewardModelName(LoginRewardModelName string) (*loginReward.LoginRewardReward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByLoginRewardModelName", LoginRewardModelName)
	ret0, _ := ret[0].(*loginReward.LoginRewardReward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByLoginRewardModelName indicates an expected call of FindByLoginRewardModelName.
func (mr *MockLoginRewardRewardRepositoryMockRecorder) FindByLoginRewardModelName(LoginRewardModelName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByLoginRewardModelName", reflect.TypeOf((*MockLoginRewardRewardRepository)(nil).FindByLoginRewardModelName), LoginRewardModelName)
}

// FindByName mocks base method.
func (m *MockLoginRewardRewardRepository) FindByName(Name string) (*loginReward.LoginRewardReward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", Name)
	ret0, _ := ret[0].(*loginReward.LoginRewardReward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockLoginRewardRewardRepositoryMockRecorder) FindByName(Name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockLoginRewardRewardRepository)(nil).FindByName), Name)
}

// FindOrNilByID mocks base method.
func (m *MockLoginRewardRewardRepository) FindOrNilByID(ID int64) (*loginReward.LoginRewardReward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByID", ID)
	ret0, _ := ret[0].(*loginReward.LoginRewardReward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByID indicates an expected call of FindOrNilByID.
func (mr *MockLoginRewardRewardRepositoryMockRecorder) FindOrNilByID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByID", reflect.TypeOf((*MockLoginRewardRewardRepository)(nil).FindOrNilByID), ID)
}

// FindOrNilByLoginRewardModelName mocks base method.
func (m *MockLoginRewardRewardRepository) FindOrNilByLoginRewardModelName(LoginRewardModelName string) (*loginReward.LoginRewardReward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByLoginRewardModelName", LoginRewardModelName)
	ret0, _ := ret[0].(*loginReward.LoginRewardReward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByLoginRewardModelName indicates an expected call of FindOrNilByLoginRewardModelName.
func (mr *MockLoginRewardRewardRepositoryMockRecorder) FindOrNilByLoginRewardModelName(LoginRewardModelName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByLoginRewardModelName", reflect.TypeOf((*MockLoginRewardRewardRepository)(nil).FindOrNilByLoginRewardModelName), LoginRewardModelName)
}

// FindOrNilByName mocks base method.
func (m *MockLoginRewardRewardRepository) FindOrNilByName(Name string) (*loginReward.LoginRewardReward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByName", Name)
	ret0, _ := ret[0].(*loginReward.LoginRewardReward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByName indicates an expected call of FindOrNilByName.
func (mr *MockLoginRewardRewardRepositoryMockRecorder) FindOrNilByName(Name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByName", reflect.TypeOf((*MockLoginRewardRewardRepository)(nil).FindOrNilByName), Name)
}

// List mocks base method.
func (m *MockLoginRewardRewardRepository) List(limit int) (*loginReward.LoginRewardRewards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", limit)
	ret0, _ := ret[0].(*loginReward.LoginRewardRewards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockLoginRewardRewardRepositoryMockRecorder) List(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLoginRewardRewardRepository)(nil).List), limit)
}

// ListByLoginRewardModelName mocks base method.
func (m *MockLoginRewardRewardRepository) ListByLoginRewardModelName(LoginRewardModelName string) (*loginReward.LoginRewardRewards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByLoginRewardModelName", LoginRewardModelName)
	ret0, _ := ret[0].(*loginReward.LoginRewardRewards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByLoginRewardModelName indicates an expected call of ListByLoginRewardModelName.
func (mr *MockLoginRewardRewardRepositoryMockRecorder) ListByLoginRewardModelName(LoginRewardModelName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByLoginRewardModelName", reflect.TypeOf((*MockLoginRewardRewardRepository)(nil).ListByLoginRewardModelName), LoginRewardModelName)
}

// ListByName mocks base method.
func (m *MockLoginRewardRewardRepository) ListByName(Name string) (*loginReward.LoginRewardRewards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByName", Name)
	ret0, _ := ret[0].(*loginReward.LoginRewardRewards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByName indicates an expected call of ListByName.
func (mr *MockLoginRewardRewardRepositoryMockRecorder) ListByName(Name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByName", reflect.TypeOf((*MockLoginRewardRewardRepository)(nil).ListByName), Name)
}

// Save mocks base method.
func (m *MockLoginRewardRewardRepository) Save(entity *loginReward.LoginRewardReward, tx *gorm.DB) (*loginReward.LoginRewardReward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", entity, tx)
	ret0, _ := ret[0].(*loginReward.LoginRewardReward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockLoginRewardRewardRepositoryMockRecorder) Save(entity, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockLoginRewardRewardRepository)(nil).Save), entity, tx)
}
