// Code generated by MockGen. DO NOT EDIT.
// Source: ./loginRewardModel_repository.gen.go

// Package loginReward is a generated GoMock package.
package loginReward

import (
	reflect "reflect"

	loginReward "github.com/game-core/gocrafter/domain/entity/master/loginReward"
	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
)

// MockLoginRewardModelRepository is a mock of LoginRewardModelRepository interface.
type MockLoginRewardModelRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLoginRewardModelRepositoryMockRecorder
}

// MockLoginRewardModelRepositoryMockRecorder is the mock recorder for MockLoginRewardModelRepository.
type MockLoginRewardModelRepositoryMockRecorder struct {
	mock *MockLoginRewardModelRepository
}

// NewMockLoginRewardModelRepository creates a new mock instance.
func NewMockLoginRewardModelRepository(ctrl *gomock.Controller) *MockLoginRewardModelRepository {
	mock := &MockLoginRewardModelRepository{ctrl: ctrl}
	mock.recorder = &MockLoginRewardModelRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginRewardModelRepository) EXPECT() *MockLoginRewardModelRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLoginRewardModelRepository) Create(entity *loginReward.LoginRewardModel, tx *gorm.DB) (*loginReward.LoginRewardModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", entity, tx)
	ret0, _ := ret[0].(*loginReward.LoginRewardModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockLoginRewardModelRepositoryMockRecorder) Create(entity, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLoginRewardModelRepository)(nil).Create), entity, tx)
}

// Delete mocks base method.
func (m *MockLoginRewardModelRepository) Delete(entity *loginReward.LoginRewardModel, tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", entity, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockLoginRewardModelRepositoryMockRecorder) Delete(entity, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLoginRewardModelRepository)(nil).Delete), entity, tx)
}

// FindByEventID mocks base method.
func (m *MockLoginRewardModelRepository) FindByEventID(EventID int64) (*loginReward.LoginRewardModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEventID", EventID)
	ret0, _ := ret[0].(*loginReward.LoginRewardModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEventID indicates an expected call of FindByEventID.
func (mr *MockLoginRewardModelRepositoryMockRecorder) FindByEventID(EventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEventID", reflect.TypeOf((*MockLoginRewardModelRepository)(nil).FindByEventID), EventID)
}

// FindByID mocks base method.
func (m *MockLoginRewardModelRepository) FindByID(ID int64) (*loginReward.LoginRewardModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ID)
	ret0, _ := ret[0].(*loginReward.LoginRewardModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockLoginRewardModelRepositoryMockRecorder) FindByID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockLoginRewardModelRepository)(nil).FindByID), ID)
}

// FindByName mocks base method.
func (m *MockLoginRewardModelRepository) FindByName(Name string) (*loginReward.LoginRewardModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", Name)
	ret0, _ := ret[0].(*loginReward.LoginRewardModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockLoginRewardModelRepositoryMockRecorder) FindByName(Name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockLoginRewardModelRepository)(nil).FindByName), Name)
}

// FindByNameAndEventID mocks base method.
func (m *MockLoginRewardModelRepository) FindByNameAndEventID(Name string, EventID int64) (*loginReward.LoginRewardModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByNameAndEventID", Name, EventID)
	ret0, _ := ret[0].(*loginReward.LoginRewardModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByNameAndEventID indicates an expected call of FindByNameAndEventID.
func (mr *MockLoginRewardModelRepositoryMockRecorder) FindByNameAndEventID(Name, EventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByNameAndEventID", reflect.TypeOf((*MockLoginRewardModelRepository)(nil).FindByNameAndEventID), Name, EventID)
}

// List mocks base method.
func (m *MockLoginRewardModelRepository) List(limit int64) (*loginReward.LoginRewardModels, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", limit)
	ret0, _ := ret[0].(*loginReward.LoginRewardModels)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockLoginRewardModelRepositoryMockRecorder) List(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLoginRewardModelRepository)(nil).List), limit)
}

// ListByEventID mocks base method.
func (m *MockLoginRewardModelRepository) ListByEventID(EventID int64) (*loginReward.LoginRewardModels, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByEventID", EventID)
	ret0, _ := ret[0].(*loginReward.LoginRewardModels)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByEventID indicates an expected call of ListByEventID.
func (mr *MockLoginRewardModelRepositoryMockRecorder) ListByEventID(EventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByEventID", reflect.TypeOf((*MockLoginRewardModelRepository)(nil).ListByEventID), EventID)
}

// ListByName mocks base method.
func (m *MockLoginRewardModelRepository) ListByName(Name string) (*loginReward.LoginRewardModels, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByName", Name)
	ret0, _ := ret[0].(*loginReward.LoginRewardModels)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByName indicates an expected call of ListByName.
func (mr *MockLoginRewardModelRepositoryMockRecorder) ListByName(Name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByName", reflect.TypeOf((*MockLoginRewardModelRepository)(nil).ListByName), Name)
}

// ListByNameAndEventID mocks base method.
func (m *MockLoginRewardModelRepository) ListByNameAndEventID(Name string, EventID int64) (*loginReward.LoginRewardModels, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByNameAndEventID", Name, EventID)
	ret0, _ := ret[0].(*loginReward.LoginRewardModels)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByNameAndEventID indicates an expected call of ListByNameAndEventID.
func (mr *MockLoginRewardModelRepositoryMockRecorder) ListByNameAndEventID(Name, EventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByNameAndEventID", reflect.TypeOf((*MockLoginRewardModelRepository)(nil).ListByNameAndEventID), Name, EventID)
}

// Update mocks base method.
func (m *MockLoginRewardModelRepository) Update(entity *loginReward.LoginRewardModel, tx *gorm.DB) (*loginReward.LoginRewardModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", entity, tx)
	ret0, _ := ret[0].(*loginReward.LoginRewardModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockLoginRewardModelRepositoryMockRecorder) Update(entity, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockLoginRewardModelRepository)(nil).Update), entity, tx)
}
