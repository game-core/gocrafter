// Code generated by MockGen. DO NOT EDIT.
// Source: ./item_repository.gen.go

// Package item is a generated GoMock package.
package item

import (
	reflect "reflect"

	item "github.com/game-core/gocrafter/domain/entity/master/item"
	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
)

// MockItemRepository is a mock of ItemRepository interface.
type MockItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockItemRepositoryMockRecorder
}

// MockItemRepositoryMockRecorder is the mock recorder for MockItemRepository.
type MockItemRepositoryMockRecorder struct {
	mock *MockItemRepository
}

// NewMockItemRepository creates a new mock instance.
func NewMockItemRepository(ctrl *gomock.Controller) *MockItemRepository {
	mock := &MockItemRepository{ctrl: ctrl}
	mock.recorder = &MockItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemRepository) EXPECT() *MockItemRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockItemRepository) Create(entity *item.Item, tx *gorm.DB) (*item.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", entity, tx)
	ret0, _ := ret[0].(*item.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockItemRepositoryMockRecorder) Create(entity, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockItemRepository)(nil).Create), entity, tx)
}

// Delete mocks base method.
func (m *MockItemRepository) Delete(entity *item.Item, tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", entity, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockItemRepositoryMockRecorder) Delete(entity, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockItemRepository)(nil).Delete), entity, tx)
}

// FindByID mocks base method.
func (m *MockItemRepository) FindByID(ID int64) (*item.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ID)
	ret0, _ := ret[0].(*item.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockItemRepositoryMockRecorder) FindByID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockItemRepository)(nil).FindByID), ID)
}

// FindByName mocks base method.
func (m *MockItemRepository) FindByName(Name string) (*item.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", Name)
	ret0, _ := ret[0].(*item.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockItemRepositoryMockRecorder) FindByName(Name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockItemRepository)(nil).FindByName), Name)
}

// FindOrNilByID mocks base method.
func (m *MockItemRepository) FindOrNilByID(ID int64) (*item.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByID", ID)
	ret0, _ := ret[0].(*item.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByID indicates an expected call of FindOrNilByID.
func (mr *MockItemRepositoryMockRecorder) FindOrNilByID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByID", reflect.TypeOf((*MockItemRepository)(nil).FindOrNilByID), ID)
}

// FindOrNilByName mocks base method.
func (m *MockItemRepository) FindOrNilByName(Name string) (*item.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByName", Name)
	ret0, _ := ret[0].(*item.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByName indicates an expected call of FindOrNilByName.
func (mr *MockItemRepositoryMockRecorder) FindOrNilByName(Name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByName", reflect.TypeOf((*MockItemRepository)(nil).FindOrNilByName), Name)
}

// List mocks base method.
func (m *MockItemRepository) List(limit int64) (*item.Items, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", limit)
	ret0, _ := ret[0].(*item.Items)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockItemRepositoryMockRecorder) List(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockItemRepository)(nil).List), limit)
}

// ListByName mocks base method.
func (m *MockItemRepository) ListByName(Name string) (*item.Items, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByName", Name)
	ret0, _ := ret[0].(*item.Items)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByName indicates an expected call of ListByName.
func (mr *MockItemRepositoryMockRecorder) ListByName(Name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByName", reflect.TypeOf((*MockItemRepository)(nil).ListByName), Name)
}

// Update mocks base method.
func (m *MockItemRepository) Update(entity *item.Item, tx *gorm.DB) (*item.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", entity, tx)
	ret0, _ := ret[0].(*item.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockItemRepositoryMockRecorder) Update(entity, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockItemRepository)(nil).Update), entity, tx)
}
