// Code generated by MockGen. DO NOT EDIT.
// Source: ./loginRewardStatus_repository.gen.go

// Package loginReward is a generated GoMock package.
package loginReward

import (
	reflect "reflect"

	loginReward "github.com/game-core/gocrafter/domain/entity/user/loginReward"
	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
)

// MockLoginRewardStatusRepository is a mock of LoginRewardStatusRepository interface.
type MockLoginRewardStatusRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLoginRewardStatusRepositoryMockRecorder
}

// MockLoginRewardStatusRepositoryMockRecorder is the mock recorder for MockLoginRewardStatusRepository.
type MockLoginRewardStatusRepositoryMockRecorder struct {
	mock *MockLoginRewardStatusRepository
}

// NewMockLoginRewardStatusRepository creates a new mock instance.
func NewMockLoginRewardStatusRepository(ctrl *gomock.Controller) *MockLoginRewardStatusRepository {
	mock := &MockLoginRewardStatusRepository{ctrl: ctrl}
	mock.recorder = &MockLoginRewardStatusRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginRewardStatusRepository) EXPECT() *MockLoginRewardStatusRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLoginRewardStatusRepository) Create(entity *loginReward.LoginRewardStatus, shardKey int, tx *gorm.DB) (*loginReward.LoginRewardStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", entity, shardKey, tx)
	ret0, _ := ret[0].(*loginReward.LoginRewardStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockLoginRewardStatusRepositoryMockRecorder) Create(entity, shardKey, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLoginRewardStatusRepository)(nil).Create), entity, shardKey, tx)
}

// Delete mocks base method.
func (m *MockLoginRewardStatusRepository) Delete(entity *loginReward.LoginRewardStatus, shardKey int, tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", entity, shardKey, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockLoginRewardStatusRepositoryMockRecorder) Delete(entity, shardKey, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLoginRewardStatusRepository)(nil).Delete), entity, shardKey, tx)
}

// FindByAccountID mocks base method.
func (m *MockLoginRewardStatusRepository) FindByAccountID(AccountID int64, shardKey int) (*loginReward.LoginRewardStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAccountID", AccountID, shardKey)
	ret0, _ := ret[0].(*loginReward.LoginRewardStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAccountID indicates an expected call of FindByAccountID.
func (mr *MockLoginRewardStatusRepositoryMockRecorder) FindByAccountID(AccountID, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAccountID", reflect.TypeOf((*MockLoginRewardStatusRepository)(nil).FindByAccountID), AccountID, shardKey)
}

// FindByAccountIDAndLoginRewardModelID mocks base method.
func (m *MockLoginRewardStatusRepository) FindByAccountIDAndLoginRewardModelID(AccountID, LoginRewardModelID int64, shardKey int) (*loginReward.LoginRewardStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAccountIDAndLoginRewardModelID", AccountID, LoginRewardModelID, shardKey)
	ret0, _ := ret[0].(*loginReward.LoginRewardStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAccountIDAndLoginRewardModelID indicates an expected call of FindByAccountIDAndLoginRewardModelID.
func (mr *MockLoginRewardStatusRepositoryMockRecorder) FindByAccountIDAndLoginRewardModelID(AccountID, LoginRewardModelID, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAccountIDAndLoginRewardModelID", reflect.TypeOf((*MockLoginRewardStatusRepository)(nil).FindByAccountIDAndLoginRewardModelID), AccountID, LoginRewardModelID, shardKey)
}

// FindByID mocks base method.
func (m *MockLoginRewardStatusRepository) FindByID(ID int64, shardKey int) (*loginReward.LoginRewardStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ID, shardKey)
	ret0, _ := ret[0].(*loginReward.LoginRewardStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockLoginRewardStatusRepositoryMockRecorder) FindByID(ID, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockLoginRewardStatusRepository)(nil).FindByID), ID, shardKey)
}

// FindByLoginRewardModelID mocks base method.
func (m *MockLoginRewardStatusRepository) FindByLoginRewardModelID(LoginRewardModelID int64, shardKey int) (*loginReward.LoginRewardStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByLoginRewardModelID", LoginRewardModelID, shardKey)
	ret0, _ := ret[0].(*loginReward.LoginRewardStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByLoginRewardModelID indicates an expected call of FindByLoginRewardModelID.
func (mr *MockLoginRewardStatusRepositoryMockRecorder) FindByLoginRewardModelID(LoginRewardModelID, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByLoginRewardModelID", reflect.TypeOf((*MockLoginRewardStatusRepository)(nil).FindByLoginRewardModelID), LoginRewardModelID, shardKey)
}

// List mocks base method.
func (m *MockLoginRewardStatusRepository) List(limit int64, shardKey int) (*loginReward.LoginRewardStatuss, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", limit, shardKey)
	ret0, _ := ret[0].(*loginReward.LoginRewardStatuss)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockLoginRewardStatusRepositoryMockRecorder) List(limit, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLoginRewardStatusRepository)(nil).List), limit, shardKey)
}

// ListByAccountID mocks base method.
func (m *MockLoginRewardStatusRepository) ListByAccountID(AccountID int64, shardKey int) (*loginReward.LoginRewardStatuss, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByAccountID", AccountID, shardKey)
	ret0, _ := ret[0].(*loginReward.LoginRewardStatuss)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByAccountID indicates an expected call of ListByAccountID.
func (mr *MockLoginRewardStatusRepositoryMockRecorder) ListByAccountID(AccountID, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByAccountID", reflect.TypeOf((*MockLoginRewardStatusRepository)(nil).ListByAccountID), AccountID, shardKey)
}

// ListByAccountIDAndLoginRewardModelID mocks base method.
func (m *MockLoginRewardStatusRepository) ListByAccountIDAndLoginRewardModelID(AccountID, LoginRewardModelID int64, shardKey int) (*loginReward.LoginRewardStatuss, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByAccountIDAndLoginRewardModelID", AccountID, LoginRewardModelID, shardKey)
	ret0, _ := ret[0].(*loginReward.LoginRewardStatuss)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByAccountIDAndLoginRewardModelID indicates an expected call of ListByAccountIDAndLoginRewardModelID.
func (mr *MockLoginRewardStatusRepositoryMockRecorder) ListByAccountIDAndLoginRewardModelID(AccountID, LoginRewardModelID, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByAccountIDAndLoginRewardModelID", reflect.TypeOf((*MockLoginRewardStatusRepository)(nil).ListByAccountIDAndLoginRewardModelID), AccountID, LoginRewardModelID, shardKey)
}

// ListByLoginRewardModelID mocks base method.
func (m *MockLoginRewardStatusRepository) ListByLoginRewardModelID(LoginRewardModelID int64, shardKey int) (*loginReward.LoginRewardStatuss, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByLoginRewardModelID", LoginRewardModelID, shardKey)
	ret0, _ := ret[0].(*loginReward.LoginRewardStatuss)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByLoginRewardModelID indicates an expected call of ListByLoginRewardModelID.
func (mr *MockLoginRewardStatusRepositoryMockRecorder) ListByLoginRewardModelID(LoginRewardModelID, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByLoginRewardModelID", reflect.TypeOf((*MockLoginRewardStatusRepository)(nil).ListByLoginRewardModelID), LoginRewardModelID, shardKey)
}

// Update mocks base method.
func (m *MockLoginRewardStatusRepository) Update(entity *loginReward.LoginRewardStatus, shardKey int, tx *gorm.DB) (*loginReward.LoginRewardStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", entity, shardKey, tx)
	ret0, _ := ret[0].(*loginReward.LoginRewardStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockLoginRewardStatusRepositoryMockRecorder) Update(entity, shardKey, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockLoginRewardStatusRepository)(nil).Update), entity, shardKey, tx)
}
