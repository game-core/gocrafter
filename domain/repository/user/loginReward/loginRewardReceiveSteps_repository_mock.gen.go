// Code generated by MockGen. DO NOT EDIT.
// Source: ./loginRewardReceiveSteps_repository.gen.go

// Package loginReward is a generated GoMock package.
package loginReward

import (
	reflect "reflect"

	loginReward "github.com/game-core/gocrafter/domain/entity/user/loginReward"
	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
)

// MockLoginRewardReceiveStepsRepository is a mock of LoginRewardReceiveStepsRepository interface.
type MockLoginRewardReceiveStepsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLoginRewardReceiveStepsRepositoryMockRecorder
}

// MockLoginRewardReceiveStepsRepositoryMockRecorder is the mock recorder for MockLoginRewardReceiveStepsRepository.
type MockLoginRewardReceiveStepsRepositoryMockRecorder struct {
	mock *MockLoginRewardReceiveStepsRepository
}

// NewMockLoginRewardReceiveStepsRepository creates a new mock instance.
func NewMockLoginRewardReceiveStepsRepository(ctrl *gomock.Controller) *MockLoginRewardReceiveStepsRepository {
	mock := &MockLoginRewardReceiveStepsRepository{ctrl: ctrl}
	mock.recorder = &MockLoginRewardReceiveStepsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginRewardReceiveStepsRepository) EXPECT() *MockLoginRewardReceiveStepsRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLoginRewardReceiveStepsRepository) Create(entity *loginReward.LoginRewardReceiveSteps, shardKey int, tx *gorm.DB) (*loginReward.LoginRewardReceiveSteps, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", entity, shardKey, tx)
	ret0, _ := ret[0].(*loginReward.LoginRewardReceiveSteps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockLoginRewardReceiveStepsRepositoryMockRecorder) Create(entity, shardKey, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLoginRewardReceiveStepsRepository)(nil).Create), entity, shardKey, tx)
}

// Delete mocks base method.
func (m *MockLoginRewardReceiveStepsRepository) Delete(entity *loginReward.LoginRewardReceiveSteps, shardKey int, tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", entity, shardKey, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockLoginRewardReceiveStepsRepositoryMockRecorder) Delete(entity, shardKey, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockLoginRewardReceiveStepsRepository)(nil).Delete), entity, shardKey, tx)
}

// FindByAccountID mocks base method.
func (m *MockLoginRewardReceiveStepsRepository) FindByAccountID(AccountID int64, shardKey int) (*loginReward.LoginRewardReceiveSteps, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAccountID", AccountID, shardKey)
	ret0, _ := ret[0].(*loginReward.LoginRewardReceiveSteps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAccountID indicates an expected call of FindByAccountID.
func (mr *MockLoginRewardReceiveStepsRepositoryMockRecorder) FindByAccountID(AccountID, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAccountID", reflect.TypeOf((*MockLoginRewardReceiveStepsRepository)(nil).FindByAccountID), AccountID, shardKey)
}

// FindByAccountIDAndLoginRewardStatusID mocks base method.
func (m *MockLoginRewardReceiveStepsRepository) FindByAccountIDAndLoginRewardStatusID(AccountID, LoginRewardStatusID int64, shardKey int) (*loginReward.LoginRewardReceiveSteps, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAccountIDAndLoginRewardStatusID", AccountID, LoginRewardStatusID, shardKey)
	ret0, _ := ret[0].(*loginReward.LoginRewardReceiveSteps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAccountIDAndLoginRewardStatusID indicates an expected call of FindByAccountIDAndLoginRewardStatusID.
func (mr *MockLoginRewardReceiveStepsRepositoryMockRecorder) FindByAccountIDAndLoginRewardStatusID(AccountID, LoginRewardStatusID, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAccountIDAndLoginRewardStatusID", reflect.TypeOf((*MockLoginRewardReceiveStepsRepository)(nil).FindByAccountIDAndLoginRewardStatusID), AccountID, LoginRewardStatusID, shardKey)
}

// FindByID mocks base method.
func (m *MockLoginRewardReceiveStepsRepository) FindByID(ID int64, shardKey int) (*loginReward.LoginRewardReceiveSteps, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ID, shardKey)
	ret0, _ := ret[0].(*loginReward.LoginRewardReceiveSteps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockLoginRewardReceiveStepsRepositoryMockRecorder) FindByID(ID, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockLoginRewardReceiveStepsRepository)(nil).FindByID), ID, shardKey)
}

// FindByLoginRewardStatusID mocks base method.
func (m *MockLoginRewardReceiveStepsRepository) FindByLoginRewardStatusID(LoginRewardStatusID int64, shardKey int) (*loginReward.LoginRewardReceiveSteps, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByLoginRewardStatusID", LoginRewardStatusID, shardKey)
	ret0, _ := ret[0].(*loginReward.LoginRewardReceiveSteps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByLoginRewardStatusID indicates an expected call of FindByLoginRewardStatusID.
func (mr *MockLoginRewardReceiveStepsRepositoryMockRecorder) FindByLoginRewardStatusID(LoginRewardStatusID, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByLoginRewardStatusID", reflect.TypeOf((*MockLoginRewardReceiveStepsRepository)(nil).FindByLoginRewardStatusID), LoginRewardStatusID, shardKey)
}

// List mocks base method.
func (m *MockLoginRewardReceiveStepsRepository) List(limit int64, shardKey int) (*loginReward.LoginRewardReceiveStepss, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", limit, shardKey)
	ret0, _ := ret[0].(*loginReward.LoginRewardReceiveStepss)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockLoginRewardReceiveStepsRepositoryMockRecorder) List(limit, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLoginRewardReceiveStepsRepository)(nil).List), limit, shardKey)
}

// ListByAccountID mocks base method.
func (m *MockLoginRewardReceiveStepsRepository) ListByAccountID(AccountID int64, shardKey int) (*loginReward.LoginRewardReceiveStepss, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByAccountID", AccountID, shardKey)
	ret0, _ := ret[0].(*loginReward.LoginRewardReceiveStepss)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByAccountID indicates an expected call of ListByAccountID.
func (mr *MockLoginRewardReceiveStepsRepositoryMockRecorder) ListByAccountID(AccountID, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByAccountID", reflect.TypeOf((*MockLoginRewardReceiveStepsRepository)(nil).ListByAccountID), AccountID, shardKey)
}

// ListByAccountIDAndLoginRewardStatusID mocks base method.
func (m *MockLoginRewardReceiveStepsRepository) ListByAccountIDAndLoginRewardStatusID(AccountID, LoginRewardStatusID int64, shardKey int) (*loginReward.LoginRewardReceiveStepss, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByAccountIDAndLoginRewardStatusID", AccountID, LoginRewardStatusID, shardKey)
	ret0, _ := ret[0].(*loginReward.LoginRewardReceiveStepss)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByAccountIDAndLoginRewardStatusID indicates an expected call of ListByAccountIDAndLoginRewardStatusID.
func (mr *MockLoginRewardReceiveStepsRepositoryMockRecorder) ListByAccountIDAndLoginRewardStatusID(AccountID, LoginRewardStatusID, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByAccountIDAndLoginRewardStatusID", reflect.TypeOf((*MockLoginRewardReceiveStepsRepository)(nil).ListByAccountIDAndLoginRewardStatusID), AccountID, LoginRewardStatusID, shardKey)
}

// ListByLoginRewardStatusID mocks base method.
func (m *MockLoginRewardReceiveStepsRepository) ListByLoginRewardStatusID(LoginRewardStatusID int64, shardKey int) (*loginReward.LoginRewardReceiveStepss, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByLoginRewardStatusID", LoginRewardStatusID, shardKey)
	ret0, _ := ret[0].(*loginReward.LoginRewardReceiveStepss)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByLoginRewardStatusID indicates an expected call of ListByLoginRewardStatusID.
func (mr *MockLoginRewardReceiveStepsRepositoryMockRecorder) ListByLoginRewardStatusID(LoginRewardStatusID, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByLoginRewardStatusID", reflect.TypeOf((*MockLoginRewardReceiveStepsRepository)(nil).ListByLoginRewardStatusID), LoginRewardStatusID, shardKey)
}

// Update mocks base method.
func (m *MockLoginRewardReceiveStepsRepository) Update(entity *loginReward.LoginRewardReceiveSteps, shardKey int, tx *gorm.DB) (*loginReward.LoginRewardReceiveSteps, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", entity, shardKey, tx)
	ret0, _ := ret[0].(*loginReward.LoginRewardReceiveSteps)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockLoginRewardReceiveStepsRepositoryMockRecorder) Update(entity, shardKey, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockLoginRewardReceiveStepsRepository)(nil).Update), entity, shardKey, tx)
}
