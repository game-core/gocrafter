// Code generated by MockGen. DO NOT EDIT.
// Source: ./itemBox_repository.gen.go

// Package item is a generated GoMock package.
package item

import (
	reflect "reflect"

	item "github.com/game-core/gocrafter/domain/entity/user/item"
	gomock "github.com/golang/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockItemBoxRepository is a mock of ItemBoxRepository interface.
type MockItemBoxRepository struct {
	ctrl     *gomock.Controller
	recorder *MockItemBoxRepositoryMockRecorder
}

// MockItemBoxRepositoryMockRecorder is the mock recorder for MockItemBoxRepository.
type MockItemBoxRepositoryMockRecorder struct {
	mock *MockItemBoxRepository
}

// NewMockItemBoxRepository creates a new mock instance.
func NewMockItemBoxRepository(ctrl *gomock.Controller) *MockItemBoxRepository {
	mock := &MockItemBoxRepository{ctrl: ctrl}
	mock.recorder = &MockItemBoxRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemBoxRepository) EXPECT() *MockItemBoxRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockItemBoxRepository) Create(entity *item.ItemBox, shardKey string, tx *gorm.DB) (*item.ItemBox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", entity, shardKey, tx)
	ret0, _ := ret[0].(*item.ItemBox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockItemBoxRepositoryMockRecorder) Create(entity, shardKey, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockItemBoxRepository)(nil).Create), entity, shardKey, tx)
}

// Delete mocks base method.
func (m *MockItemBoxRepository) Delete(entity *item.ItemBox, shardKey string, tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", entity, shardKey, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockItemBoxRepositoryMockRecorder) Delete(entity, shardKey, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockItemBoxRepository)(nil).Delete), entity, shardKey, tx)
}

// FindByAccountID mocks base method.
func (m *MockItemBoxRepository) FindByAccountID(AccountID int64, shardKey string) (*item.ItemBox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAccountID", AccountID, shardKey)
	ret0, _ := ret[0].(*item.ItemBox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAccountID indicates an expected call of FindByAccountID.
func (mr *MockItemBoxRepositoryMockRecorder) FindByAccountID(AccountID, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAccountID", reflect.TypeOf((*MockItemBoxRepository)(nil).FindByAccountID), AccountID, shardKey)
}

// FindByAccountIDAndItemName mocks base method.
func (m *MockItemBoxRepository) FindByAccountIDAndItemName(AccountID int64, ItemName, shardKey string) (*item.ItemBox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByAccountIDAndItemName", AccountID, ItemName, shardKey)
	ret0, _ := ret[0].(*item.ItemBox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByAccountIDAndItemName indicates an expected call of FindByAccountIDAndItemName.
func (mr *MockItemBoxRepositoryMockRecorder) FindByAccountIDAndItemName(AccountID, ItemName, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByAccountIDAndItemName", reflect.TypeOf((*MockItemBoxRepository)(nil).FindByAccountIDAndItemName), AccountID, ItemName, shardKey)
}

// FindByID mocks base method.
func (m *MockItemBoxRepository) FindByID(ID int64, shardKey string) (*item.ItemBox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ID, shardKey)
	ret0, _ := ret[0].(*item.ItemBox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockItemBoxRepositoryMockRecorder) FindByID(ID, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockItemBoxRepository)(nil).FindByID), ID, shardKey)
}

// FindByItemName mocks base method.
func (m *MockItemBoxRepository) FindByItemName(ItemName, shardKey string) (*item.ItemBox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByItemName", ItemName, shardKey)
	ret0, _ := ret[0].(*item.ItemBox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByItemName indicates an expected call of FindByItemName.
func (mr *MockItemBoxRepositoryMockRecorder) FindByItemName(ItemName, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByItemName", reflect.TypeOf((*MockItemBoxRepository)(nil).FindByItemName), ItemName, shardKey)
}

// FindOrNilByAccountID mocks base method.
func (m *MockItemBoxRepository) FindOrNilByAccountID(AccountID int64, shardKey string) (*item.ItemBox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByAccountID", AccountID, shardKey)
	ret0, _ := ret[0].(*item.ItemBox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByAccountID indicates an expected call of FindOrNilByAccountID.
func (mr *MockItemBoxRepositoryMockRecorder) FindOrNilByAccountID(AccountID, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByAccountID", reflect.TypeOf((*MockItemBoxRepository)(nil).FindOrNilByAccountID), AccountID, shardKey)
}

// FindOrNilByAccountIDAndItemName mocks base method.
func (m *MockItemBoxRepository) FindOrNilByAccountIDAndItemName(AccountID int64, ItemName, shardKey string) (*item.ItemBox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByAccountIDAndItemName", AccountID, ItemName, shardKey)
	ret0, _ := ret[0].(*item.ItemBox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByAccountIDAndItemName indicates an expected call of FindOrNilByAccountIDAndItemName.
func (mr *MockItemBoxRepositoryMockRecorder) FindOrNilByAccountIDAndItemName(AccountID, ItemName, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByAccountIDAndItemName", reflect.TypeOf((*MockItemBoxRepository)(nil).FindOrNilByAccountIDAndItemName), AccountID, ItemName, shardKey)
}

// FindOrNilByID mocks base method.
func (m *MockItemBoxRepository) FindOrNilByID(ID int64, shardKey string) (*item.ItemBox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByID", ID, shardKey)
	ret0, _ := ret[0].(*item.ItemBox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByID indicates an expected call of FindOrNilByID.
func (mr *MockItemBoxRepositoryMockRecorder) FindOrNilByID(ID, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByID", reflect.TypeOf((*MockItemBoxRepository)(nil).FindOrNilByID), ID, shardKey)
}

// FindOrNilByItemName mocks base method.
func (m *MockItemBoxRepository) FindOrNilByItemName(ItemName, shardKey string) (*item.ItemBox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByItemName", ItemName, shardKey)
	ret0, _ := ret[0].(*item.ItemBox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByItemName indicates an expected call of FindOrNilByItemName.
func (mr *MockItemBoxRepositoryMockRecorder) FindOrNilByItemName(ItemName, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByItemName", reflect.TypeOf((*MockItemBoxRepository)(nil).FindOrNilByItemName), ItemName, shardKey)
}

// List mocks base method.
func (m *MockItemBoxRepository) List(limit int, shardKey string) (*item.ItemBoxs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", limit, shardKey)
	ret0, _ := ret[0].(*item.ItemBoxs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockItemBoxRepositoryMockRecorder) List(limit, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockItemBoxRepository)(nil).List), limit, shardKey)
}

// ListByAccountID mocks base method.
func (m *MockItemBoxRepository) ListByAccountID(AccountID int64, shardKey string) (*item.ItemBoxs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByAccountID", AccountID, shardKey)
	ret0, _ := ret[0].(*item.ItemBoxs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByAccountID indicates an expected call of ListByAccountID.
func (mr *MockItemBoxRepositoryMockRecorder) ListByAccountID(AccountID, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByAccountID", reflect.TypeOf((*MockItemBoxRepository)(nil).ListByAccountID), AccountID, shardKey)
}

// ListByAccountIDAndItemName mocks base method.
func (m *MockItemBoxRepository) ListByAccountIDAndItemName(AccountID int64, ItemName, shardKey string) (*item.ItemBoxs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByAccountIDAndItemName", AccountID, ItemName, shardKey)
	ret0, _ := ret[0].(*item.ItemBoxs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByAccountIDAndItemName indicates an expected call of ListByAccountIDAndItemName.
func (mr *MockItemBoxRepositoryMockRecorder) ListByAccountIDAndItemName(AccountID, ItemName, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByAccountIDAndItemName", reflect.TypeOf((*MockItemBoxRepository)(nil).ListByAccountIDAndItemName), AccountID, ItemName, shardKey)
}

// ListByItemName mocks base method.
func (m *MockItemBoxRepository) ListByItemName(ItemName, shardKey string) (*item.ItemBoxs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByItemName", ItemName, shardKey)
	ret0, _ := ret[0].(*item.ItemBoxs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByItemName indicates an expected call of ListByItemName.
func (mr *MockItemBoxRepositoryMockRecorder) ListByItemName(ItemName, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByItemName", reflect.TypeOf((*MockItemBoxRepository)(nil).ListByItemName), ItemName, shardKey)
}

// Save mocks base method.
func (m *MockItemBoxRepository) Save(entity *item.ItemBox, shardKey string, tx *gorm.DB) (*item.ItemBox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", entity, shardKey, tx)
	ret0, _ := ret[0].(*item.ItemBox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockItemBoxRepositoryMockRecorder) Save(entity, shardKey, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockItemBoxRepository)(nil).Save), entity, shardKey, tx)
}
