// Code generated by MockGen. DO NOT EDIT.
// Source: ./itemBox_repository.gen.go

// Package item is a generated GoMock package.
package item

import (
	reflect "reflect"

	item "github.com/game-core/gocrafter/domain/entity/user/item"
	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
)

// MockItemBoxRepository is a mock of ItemBoxRepository interface.
type MockItemBoxRepository struct {
	ctrl     *gomock.Controller
	recorder *MockItemBoxRepositoryMockRecorder
}

// MockItemBoxRepositoryMockRecorder is the mock recorder for MockItemBoxRepository.
type MockItemBoxRepositoryMockRecorder struct {
	mock *MockItemBoxRepository
}

// NewMockItemBoxRepository creates a new mock instance.
func NewMockItemBoxRepository(ctrl *gomock.Controller) *MockItemBoxRepository {
	mock := &MockItemBoxRepository{ctrl: ctrl}
	mock.recorder = &MockItemBoxRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemBoxRepository) EXPECT() *MockItemBoxRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockItemBoxRepository) Create(entity *item.ItemBox, shardKey int, tx *gorm.DB) (*item.ItemBox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", entity, shardKey, tx)
	ret0, _ := ret[0].(*item.ItemBox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockItemBoxRepositoryMockRecorder) Create(entity, shardKey, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockItemBoxRepository)(nil).Create), entity, shardKey, tx)
}

// Delete mocks base method.
func (m *MockItemBoxRepository) Delete(entity *item.ItemBox, shardKey int, tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", entity, shardKey, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockItemBoxRepositoryMockRecorder) Delete(entity, shardKey, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockItemBoxRepository)(nil).Delete), entity, shardKey, tx)
}

// FindByID mocks base method.
func (m *MockItemBoxRepository) FindByID(ID int64, shardKey int) (*item.ItemBox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ID, shardKey)
	ret0, _ := ret[0].(*item.ItemBox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockItemBoxRepositoryMockRecorder) FindByID(ID, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockItemBoxRepository)(nil).FindByID), ID, shardKey)
}

// FindByItemID mocks base method.
func (m *MockItemBoxRepository) FindByItemID(ItemID int64, shardKey int) (*item.ItemBox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByItemID", ItemID, shardKey)
	ret0, _ := ret[0].(*item.ItemBox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByItemID indicates an expected call of FindByItemID.
func (mr *MockItemBoxRepositoryMockRecorder) FindByItemID(ItemID, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByItemID", reflect.TypeOf((*MockItemBoxRepository)(nil).FindByItemID), ItemID, shardKey)
}

// FindByUserID mocks base method.
func (m *MockItemBoxRepository) FindByUserID(UserID int64, shardKey int) (*item.ItemBox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", UserID, shardKey)
	ret0, _ := ret[0].(*item.ItemBox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockItemBoxRepositoryMockRecorder) FindByUserID(UserID, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockItemBoxRepository)(nil).FindByUserID), UserID, shardKey)
}

// FindByUserIDAndItemID mocks base method.
func (m *MockItemBoxRepository) FindByUserIDAndItemID(UserID, ItemID int64, shardKey int) (*item.ItemBox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserIDAndItemID", UserID, ItemID, shardKey)
	ret0, _ := ret[0].(*item.ItemBox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserIDAndItemID indicates an expected call of FindByUserIDAndItemID.
func (mr *MockItemBoxRepositoryMockRecorder) FindByUserIDAndItemID(UserID, ItemID, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserIDAndItemID", reflect.TypeOf((*MockItemBoxRepository)(nil).FindByUserIDAndItemID), UserID, ItemID, shardKey)
}

// FindOrNilByID mocks base method.
func (m *MockItemBoxRepository) FindOrNilByID(ID int64, shardKey int) (*item.ItemBox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByID", ID, shardKey)
	ret0, _ := ret[0].(*item.ItemBox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByID indicates an expected call of FindOrNilByID.
func (mr *MockItemBoxRepositoryMockRecorder) FindOrNilByID(ID, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByID", reflect.TypeOf((*MockItemBoxRepository)(nil).FindOrNilByID), ID, shardKey)
}

// FindOrNilByItemID mocks base method.
func (m *MockItemBoxRepository) FindOrNilByItemID(ItemID int64, shardKey int) (*item.ItemBox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByItemID", ItemID, shardKey)
	ret0, _ := ret[0].(*item.ItemBox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByItemID indicates an expected call of FindOrNilByItemID.
func (mr *MockItemBoxRepositoryMockRecorder) FindOrNilByItemID(ItemID, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByItemID", reflect.TypeOf((*MockItemBoxRepository)(nil).FindOrNilByItemID), ItemID, shardKey)
}

// FindOrNilByUserID mocks base method.
func (m *MockItemBoxRepository) FindOrNilByUserID(UserID int64, shardKey int) (*item.ItemBox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByUserID", UserID, shardKey)
	ret0, _ := ret[0].(*item.ItemBox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByUserID indicates an expected call of FindOrNilByUserID.
func (mr *MockItemBoxRepositoryMockRecorder) FindOrNilByUserID(UserID, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByUserID", reflect.TypeOf((*MockItemBoxRepository)(nil).FindOrNilByUserID), UserID, shardKey)
}

// FindOrNilByUserIDAndItemID mocks base method.
func (m *MockItemBoxRepository) FindOrNilByUserIDAndItemID(UserID, ItemID int64, shardKey int) (*item.ItemBox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrNilByUserIDAndItemID", UserID, ItemID, shardKey)
	ret0, _ := ret[0].(*item.ItemBox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrNilByUserIDAndItemID indicates an expected call of FindOrNilByUserIDAndItemID.
func (mr *MockItemBoxRepositoryMockRecorder) FindOrNilByUserIDAndItemID(UserID, ItemID, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrNilByUserIDAndItemID", reflect.TypeOf((*MockItemBoxRepository)(nil).FindOrNilByUserIDAndItemID), UserID, ItemID, shardKey)
}

// List mocks base method.
func (m *MockItemBoxRepository) List(limit int64, shardKey int) (*item.ItemBoxs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", limit, shardKey)
	ret0, _ := ret[0].(*item.ItemBoxs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockItemBoxRepositoryMockRecorder) List(limit, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockItemBoxRepository)(nil).List), limit, shardKey)
}

// ListByItemID mocks base method.
func (m *MockItemBoxRepository) ListByItemID(ItemID int64, shardKey int) (*item.ItemBoxs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByItemID", ItemID, shardKey)
	ret0, _ := ret[0].(*item.ItemBoxs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByItemID indicates an expected call of ListByItemID.
func (mr *MockItemBoxRepositoryMockRecorder) ListByItemID(ItemID, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByItemID", reflect.TypeOf((*MockItemBoxRepository)(nil).ListByItemID), ItemID, shardKey)
}

// ListByUserID mocks base method.
func (m *MockItemBoxRepository) ListByUserID(UserID int64, shardKey int) (*item.ItemBoxs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUserID", UserID, shardKey)
	ret0, _ := ret[0].(*item.ItemBoxs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUserID indicates an expected call of ListByUserID.
func (mr *MockItemBoxRepositoryMockRecorder) ListByUserID(UserID, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUserID", reflect.TypeOf((*MockItemBoxRepository)(nil).ListByUserID), UserID, shardKey)
}

// ListByUserIDAndItemID mocks base method.
func (m *MockItemBoxRepository) ListByUserIDAndItemID(UserID, ItemID int64, shardKey int) (*item.ItemBoxs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUserIDAndItemID", UserID, ItemID, shardKey)
	ret0, _ := ret[0].(*item.ItemBoxs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUserIDAndItemID indicates an expected call of ListByUserIDAndItemID.
func (mr *MockItemBoxRepositoryMockRecorder) ListByUserIDAndItemID(UserID, ItemID, shardKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUserIDAndItemID", reflect.TypeOf((*MockItemBoxRepository)(nil).ListByUserIDAndItemID), UserID, ItemID, shardKey)
}

// Update mocks base method.
func (m *MockItemBoxRepository) Update(entity *item.ItemBox, shardKey int, tx *gorm.DB) (*item.ItemBox, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", entity, shardKey, tx)
	ret0, _ := ret[0].(*item.ItemBox)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockItemBoxRepositoryMockRecorder) Update(entity, shardKey, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockItemBoxRepository)(nil).Update), entity, shardKey, tx)
}
