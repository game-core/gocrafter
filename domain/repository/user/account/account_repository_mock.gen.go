// Code generated by MockGen. DO NOT EDIT.
// Source: ./account_repository.gen.go

// Package account is a generated GoMock package.
package account

import (
	reflect "reflect"

	account "github.com/game-core/gocrafter/domain/entity/user/account"
	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
)

// MockAccountRepository is a mock of AccountRepository interface.
type MockAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryMockRecorder
}

// MockAccountRepositoryMockRecorder is the mock recorder for MockAccountRepository.
type MockAccountRepositoryMockRecorder struct {
	mock *MockAccountRepository
}

// NewMockAccountRepository creates a new mock instance.
func NewMockAccountRepository(ctrl *gomock.Controller) *MockAccountRepository {
	mock := &MockAccountRepository{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepository) EXPECT() *MockAccountRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccountRepository) Create(entity *account.Account, accountID int64, tx *gorm.DB) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", entity, accountID, tx)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAccountRepositoryMockRecorder) Create(entity, accountID, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountRepository)(nil).Create), entity, accountID, tx)
}

// Delete mocks base method.
func (m *MockAccountRepository) Delete(entity *account.Account, accountID int64, tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", entity, accountID, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAccountRepositoryMockRecorder) Delete(entity, accountID, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAccountRepository)(nil).Delete), entity, accountID, tx)
}

// FindByID mocks base method.
func (m *MockAccountRepository) FindByID(ID, accountID int64) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ID, accountID)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockAccountRepositoryMockRecorder) FindByID(ID, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockAccountRepository)(nil).FindByID), ID, accountID)
}

// FindByIDAndUUID mocks base method.
func (m *MockAccountRepository) FindByIDAndUUID(ID int64, UUID string, accountID int64) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByIDAndUUID", ID, UUID, accountID)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByIDAndUUID indicates an expected call of FindByIDAndUUID.
func (mr *MockAccountRepositoryMockRecorder) FindByIDAndUUID(ID, UUID, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByIDAndUUID", reflect.TypeOf((*MockAccountRepository)(nil).FindByIDAndUUID), ID, UUID, accountID)
}

// FindByUUID mocks base method.
func (m *MockAccountRepository) FindByUUID(UUID string, accountID int64) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUUID", UUID, accountID)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUUID indicates an expected call of FindByUUID.
func (mr *MockAccountRepositoryMockRecorder) FindByUUID(UUID, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUUID", reflect.TypeOf((*MockAccountRepository)(nil).FindByUUID), UUID, accountID)
}

// List mocks base method.
func (m *MockAccountRepository) List(limit, accountID int64) (*account.Accounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", limit, accountID)
	ret0, _ := ret[0].(*account.Accounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAccountRepositoryMockRecorder) List(limit, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAccountRepository)(nil).List), limit, accountID)
}

// ListByIDAndUUID mocks base method.
func (m *MockAccountRepository) ListByIDAndUUID(ID int64, UUID string, accountID int64) (*account.Accounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByIDAndUUID", ID, UUID, accountID)
	ret0, _ := ret[0].(*account.Accounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByIDAndUUID indicates an expected call of ListByIDAndUUID.
func (mr *MockAccountRepositoryMockRecorder) ListByIDAndUUID(ID, UUID, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByIDAndUUID", reflect.TypeOf((*MockAccountRepository)(nil).ListByIDAndUUID), ID, UUID, accountID)
}

// ListByUUID mocks base method.
func (m *MockAccountRepository) ListByUUID(UUID string, accountID int64) (*account.Accounts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUUID", UUID, accountID)
	ret0, _ := ret[0].(*account.Accounts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUUID indicates an expected call of ListByUUID.
func (mr *MockAccountRepositoryMockRecorder) ListByUUID(UUID, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUUID", reflect.TypeOf((*MockAccountRepository)(nil).ListByUUID), UUID, accountID)
}

// Update mocks base method.
func (m *MockAccountRepository) Update(entity *account.Account, accountID int64, tx *gorm.DB) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", entity, accountID, tx)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAccountRepositoryMockRecorder) Update(entity, accountID, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAccountRepository)(nil).Update), entity, accountID, tx)
}
