// Code generated by MockGen. DO NOT EDIT.
// Source: ./shard_repository.gen.go

// Package shard is a generated GoMock package.
package shard

import (
	reflect "reflect"

	shard "github.com/game-core/gocrafter/domain/entity/config/shard"
	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
)

// MockShardRepository is a mock of ShardRepository interface.
type MockShardRepository struct {
	ctrl     *gomock.Controller
	recorder *MockShardRepositoryMockRecorder
}

// MockShardRepositoryMockRecorder is the mock recorder for MockShardRepository.
type MockShardRepositoryMockRecorder struct {
	mock *MockShardRepository
}

// NewMockShardRepository creates a new mock instance.
func NewMockShardRepository(ctrl *gomock.Controller) *MockShardRepository {
	mock := &MockShardRepository{ctrl: ctrl}
	mock.recorder = &MockShardRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShardRepository) EXPECT() *MockShardRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockShardRepository) Create(entity *shard.Shard, tx *gorm.DB) (*shard.Shard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", entity, tx)
	ret0, _ := ret[0].(*shard.Shard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockShardRepositoryMockRecorder) Create(entity, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockShardRepository)(nil).Create), entity, tx)
}

// Delete mocks base method.
func (m *MockShardRepository) Delete(entity *shard.Shard, tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", entity, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockShardRepositoryMockRecorder) Delete(entity, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockShardRepository)(nil).Delete), entity, tx)
}

// FindByID mocks base method.
func (m *MockShardRepository) FindByID(ID int64) (*shard.Shard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ID)
	ret0, _ := ret[0].(*shard.Shard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockShardRepositoryMockRecorder) FindByID(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockShardRepository)(nil).FindByID), ID)
}

// List mocks base method.
func (m *MockShardRepository) List(limit int64) (*shard.Shards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", limit)
	ret0, _ := ret[0].(*shard.Shards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockShardRepositoryMockRecorder) List(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockShardRepository)(nil).List), limit)
}

// Update mocks base method.
func (m *MockShardRepository) Update(entity *shard.Shard, tx *gorm.DB) (*shard.Shard, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", entity, tx)
	ret0, _ := ret[0].(*shard.Shard)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockShardRepositoryMockRecorder) Update(entity, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockShardRepository)(nil).Update), entity, tx)
}
