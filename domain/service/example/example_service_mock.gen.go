// Code generated by MockGen. DO NOT EDIT.
// Source: ./example_service.go

// Package example is a generated GoMock package.
package example

import (
	reflect "reflect"

	example "github.com/game-core/gocrafter/api/presentation/response/example"
	gomock "github.com/golang/mock/gomock"
)

// MockExampleService is a mock of ExampleService interface.
type MockExampleService struct {
	ctrl     *gomock.Controller
	recorder *MockExampleServiceMockRecorder
}

// MockExampleServiceMockRecorder is the mock recorder for MockExampleService.
type MockExampleServiceMockRecorder struct {
	mock *MockExampleService
}

// NewMockExampleService creates a new mock instance.
func NewMockExampleService(ctrl *gomock.Controller) *MockExampleService {
	mock := &MockExampleService{ctrl: ctrl}
	mock.recorder = &MockExampleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExampleService) EXPECT() *MockExampleServiceMockRecorder {
	return m.recorder
}

// ListExample mocks base method.
func (m *MockExampleService) ListExample(limit int64) (*example.ListExample, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExample", limit)
	ret0, _ := ret[0].(*example.ListExample)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExample indicates an expected call of ListExample.
func (mr *MockExampleServiceMockRecorder) ListExample(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExample", reflect.TypeOf((*MockExampleService)(nil).ListExample), limit)
}
