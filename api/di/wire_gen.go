// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	account2 "github.com/game-core/gocrafter/api/presentation/controller/account"
	"github.com/game-core/gocrafter/api/presentation/controller/loginReward"
	"github.com/game-core/gocrafter/api/presentation/middleware/account"
	"github.com/game-core/gocrafter/config/database"
	account3 "github.com/game-core/gocrafter/domain/service/api/account"
	"github.com/game-core/gocrafter/domain/service/api/event"
	"github.com/game-core/gocrafter/domain/service/api/item"
	loginReward2 "github.com/game-core/gocrafter/domain/service/api/loginReward"
	"github.com/game-core/gocrafter/domain/service/api/shard"
	shard2 "github.com/game-core/gocrafter/infra/dao/config/shard"
	transaction2 "github.com/game-core/gocrafter/infra/dao/config/transaction"
	event2 "github.com/game-core/gocrafter/infra/dao/master/event"
	item2 "github.com/game-core/gocrafter/infra/dao/master/item"
	loginReward4 "github.com/game-core/gocrafter/infra/dao/master/loginReward"
	account4 "github.com/game-core/gocrafter/infra/dao/user/account"
	item3 "github.com/game-core/gocrafter/infra/dao/user/item"
	loginReward3 "github.com/game-core/gocrafter/infra/dao/user/loginReward"
	"github.com/game-core/gocrafter/infra/dao/user/transaction"
)

// Injectors from wire.go:

func InitializeAccountMiddleware() account.AccountMiddleware {
	accountMiddleware := account.NewAccountMiddleware()
	return accountMiddleware
}

func InitializeAccountController() account2.AccountController {
	accountService := InitializeAccountService()
	accountController := account2.NewAccountController(accountService)
	return accountController
}

func InitializeLoginRewardController() loginReward.LoginRewardController {
	loginRewardService := InitializeLoginRewardService()
	loginRewardController := loginReward.NewLoginRewardController(loginRewardService)
	return loginRewardController
}

func InitializeAccountService() account3.AccountService {
	shardService := InitializeShardService()
	sqlHandler := database.NewDB()
	transactionRepository := transaction.NewTransactionDao(sqlHandler)
	accountRepository := account4.NewAccountDao(sqlHandler)
	accountService := account3.NewAccountService(shardService, transactionRepository, accountRepository)
	return accountService
}

func InitializeShardService() shard.ShardService {
	sqlHandler := database.NewDB()
	shardRepository := shard2.NewShardDao(sqlHandler)
	transactionRepository := transaction2.NewTransactionDao(sqlHandler)
	shardService := shard.NewShardService(shardRepository, transactionRepository)
	return shardService
}

func InitializeLoginRewardService() loginReward2.LoginRewardService {
	sqlHandler := database.NewDB()
	transactionRepository := transaction.NewTransactionDao(sqlHandler)
	loginRewardStatusRepository := loginReward3.NewLoginRewardStatusDao(sqlHandler)
	loginRewardModelRepository := loginReward4.NewLoginRewardModelDao(sqlHandler)
	loginRewardRewardRepository := loginReward4.NewLoginRewardRewardDao(sqlHandler)
	eventService := InitializeEventService()
	itemService := InitializeItemService()
	loginRewardService := loginReward2.NewLoginRewardService(transactionRepository, loginRewardStatusRepository, loginRewardModelRepository, loginRewardRewardRepository, eventService, itemService)
	return loginRewardService
}

func InitializeEventService() event.EventService {
	sqlHandler := database.NewDB()
	eventRepository := event2.NewEventDao(sqlHandler)
	eventService := event.NewEventService(eventRepository)
	return eventService
}

func InitializeItemService() item.ItemService {
	sqlHandler := database.NewDB()
	transactionRepository := transaction.NewTransactionDao(sqlHandler)
	itemRepository := item2.NewItemDao(sqlHandler)
	itemBoxRepository := item3.NewItemBoxDao(sqlHandler)
	itemService := item.NewItemService(transactionRepository, itemRepository, itemBoxRepository)
	return itemService
}
