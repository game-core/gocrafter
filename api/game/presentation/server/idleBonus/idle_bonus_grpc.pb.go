// 放置ボーナス

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: idle_bonus.proto

package idleBonus

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IdleBonus_Receive_FullMethodName = "/proto.IdleBonus/Receive"
)

// IdleBonusClient is the client API for IdleBonus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IdleBonusClient interface {
	Receive(ctx context.Context, in *IdleBonusReceiveRequest, opts ...grpc.CallOption) (*IdleBonusReceiveResponse, error)
}

type idleBonusClient struct {
	cc grpc.ClientConnInterface
}

func NewIdleBonusClient(cc grpc.ClientConnInterface) IdleBonusClient {
	return &idleBonusClient{cc}
}

func (c *idleBonusClient) Receive(ctx context.Context, in *IdleBonusReceiveRequest, opts ...grpc.CallOption) (*IdleBonusReceiveResponse, error) {
	out := new(IdleBonusReceiveResponse)
	err := c.cc.Invoke(ctx, IdleBonus_Receive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdleBonusServer is the server API for IdleBonus service.
// All implementations must embed UnimplementedIdleBonusServer
// for forward compatibility
type IdleBonusServer interface {
	Receive(context.Context, *IdleBonusReceiveRequest) (*IdleBonusReceiveResponse, error)
	mustEmbedUnimplementedIdleBonusServer()
}

// UnimplementedIdleBonusServer must be embedded to have forward compatible implementations.
type UnimplementedIdleBonusServer struct {
}

func (UnimplementedIdleBonusServer) Receive(context.Context, *IdleBonusReceiveRequest) (*IdleBonusReceiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (UnimplementedIdleBonusServer) mustEmbedUnimplementedIdleBonusServer() {}

// UnsafeIdleBonusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdleBonusServer will
// result in compilation errors.
type UnsafeIdleBonusServer interface {
	mustEmbedUnimplementedIdleBonusServer()
}

func RegisterIdleBonusServer(s grpc.ServiceRegistrar, srv IdleBonusServer) {
	s.RegisterService(&IdleBonus_ServiceDesc, srv)
}

func _IdleBonus_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdleBonusReceiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdleBonusServer).Receive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdleBonus_Receive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdleBonusServer).Receive(ctx, req.(*IdleBonusReceiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IdleBonus_ServiceDesc is the grpc.ServiceDesc for IdleBonus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdleBonus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.IdleBonus",
	HandlerType: (*IdleBonusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Receive",
			Handler:    _IdleBonus_Receive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "idle_bonus.proto",
}
